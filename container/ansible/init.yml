- name: Play 01 - Init (Cloud)
  hosts: main
  gather_facts: no
  tasks:

  - name: "[cloud - init] - project_base_title"
    set_fact:
      project_base_title: "[cloud - init]"
      project_keys_file_rel: "init/ctl/vars.yml"
    tags: ["no_print"]

  - name: "{{ project_base_title }} - load the init environment vars"
    include_vars:
      file: "/main/{{ project_keys_file_rel }}"
      name: project_env_init

  - name: "{{ project_title }} - validate the key init parameter"
    fail:
      msg: "project key not specified at {{ project_keys_file_rel }}"
    when: (project_env_init.key | default('')) == ''

  - name: "{{ project_base_title }} - project_title"
    set_fact:
      project_title: "{{ project_base_title }} [{{ project_env_init.key }}]"
      env_dev: "{{ project_env_init.dev | default(false) }}"
    tags: ["no_print"]

  - name: "{{ project_title }} - validate the repo init parameters"
    fail:
      msg: "{{ project_item }} not specified at {{ project_keys_file_rel }} under repo"
    when: (project_env_init.repo[project_item] | default('')) == ''
    loop:
    - "env_dir"
    - "src"
    - "version"
    loop_control:
      loop_var: project_item

  # env repository

  - name: "{{ project_title }} - project_env_title"
    set_fact:
      project_env_title: "{{ project_title }} - environment"
    tags: ["no_print"]

  - name: "{{ project_env_title }} - set_fact - project_env_dir"
    set_fact:
      project_env_dir: "/main/envs/{{ project_env_init.repo.env_dir }}"
    tags: ["no_print"]

  - name: "{{ project_env_title }} - set_fact - project_env_file"
    set_fact:
      project_env_file: "{{ project_env_dir }}/{{ project_env_init.repo.env_file }}"
      project_ssh_file: >-
        {{
          (project_env_init.repo.ssh_file | default('') != '')
          | ternary(
            '/main/secrets/' + (project_env_init.repo.ssh_file | default('')),
            ''
          )
        }}
    tags: ["no_print"]

  - name: "{{ project_env_title }} - create the env dir"
    file:
      path: "{{ project_env_dir }}"
      state: directory
      mode: "{{ env_dev | bool | ternary(0777, 0755) }}"

  - name: "{{ project_env_title }} - git env"
    git:
      repo: "{{ project_env_init.repo.src }}"
      version: "{{ project_env_init.repo.version }}"
      key_file: "{{ project_ssh_file | default(omit, true) }}"
      accept_hostkey: yes
      dest: "{{ project_env_dir }}"
      update: "{{ env_dev | bool | ternary('no', 'yes') }}"
      force: no

  - name: "{{ project_env_title }} - load environment vars"
    include_vars:
      file: "{{ project_env_file }}"
      name: project_env
    tags: ["no_print"]

  - name: "{{ project_env_title }} - validate ctxs"
    fail:
      msg: >-
        {{ project_env_title }} - the contexts list (ctxs) parameter is defined in both
        the main environment file ({{ project_env_init.ctxs | default([]) }})
        as well as in the repo environment file ({{ project_env.ctxs | default([]) }})
        - it should be in only 1 of them, or none
    when: >-
      ((project_env.ctxs | default([]) | length) > 0)
      and
      ((project_env_init.ctxs | default([]) | length) > 0)
    tags: ["no_print"]

  # env base repository

  - block:

    - name: "{{ project_env_title }} - validate env base destination"
      fail:
        msg: "{{ project_env_title }} - git env base destination not defined"
      when: >-
        (not (env_dev | default(false) | bool))
        and
        (not (project_env_init.local | default(false) | bool))
        and
        ((project_env.env.repo_dir | default('')) == '')
      tags: ["no_print"]

    - name: "{{ project_env_title }} - project_env_base_dest"
      set_fact:
        project_env_base_dest: >-
          {{
            project_env_dir +
            (
              ((project_env.env.repo_dir | default('')) != '')
              | ternary('/' + project_env.env.repo_dir, '')
            )
          }}
        project_env_base_ssh_filename: >-
          {{
            ((project_env.env.ssh_file | default('')) != '')
            | ternary('ssh-base.key', '')
          }}
      tags: ["no_print"]

    - name: "{{ project_env_title }} - project_ssh_file"
      set_fact:
        project_ssh_file: >-
          {{
            (project_env_base_ssh_filename | default('') != '')
            | ternary(
              '/main/secrets/' + (project_env_base_ssh_filename | default('')),
              ''
            )
          }}

    - name: "{{ project_env_title }} - copy env base ssh file"
      copy:
        src: "{{ project_env_dir }}/{{ project_env.env.repo.ssh_file }}"
        dest: "{{ project_ssh_file }}"
        decrypt: "{{ project_env.env.repo.ssh_file_encrypted | default(false) | bool }}"
        mode: "{{ env_dev | default(false, true) | bool | ternary(0666, 0600) }}"
      when: project_ssh_file != ''

    - name: "{{ project_env_title }} - git env base"
      git:
        repo: "{{ project_env.env.repo.src }}"
        version: "{{ project_env.env.repo.version }}"
        key_file: "{{ project_ssh_file | default(omit, true) }}"
        accept_hostkey: yes
        dest: "{{ project_env_base_dest }}"
        update: "{{ env_dev | bool | ternary('no', 'yes') }}"
        force: no

    - name: "{{ project_env_title }} - load base environment vars"
      include_vars:
        file: "{{ project_env_base_dest }}/{{ project_env.env.file }}"
        name: project_env_base
      tags: ["no_print"]

    - name: "{{ project_env_title }} - project_env (from base)"
      set_fact:
        project_env: "{{ project_env_base }}"
      vars:
        params: "{{ project_env }}"
      tags: ["no_print"]

    when: project_env.env is defined
    tags: ["no_print"]

  # environment contexts (ctxs)

  - name: "{{ project_env_title }} - project_env_ctxs"
    set_fact:
      project_env_ctxs: "{{ project_env_init.ctxs | default([]) }}"
    tags: ["no_print"]

  - name: "{{ project_env_title }}"
    set_fact:
      project_env: "{{ project_env | combine({ 'ctxs': project_env_ctxs | default([]) }) }}"
    when: >-
      ((project_env.ctxs | default([]) | length) == 0)
      and
      ((project_env_ctxs | default([]) | length) > 0)
    tags: ["no_print"]

  - name: "{{ project_env_title }} - validate ctx(s) - name"
    fail:
      msg: >-
        {{ project_env_title }} -
        ctx should not be defined directly in the env file (define ctxs instead)
    when: (project_env.ctx | default('')) != ''
    tags: ["no_print"]

  - name: "{{ project_env_title }} - validate ctx(s) - required"
    fail:
      msg: >-
        {{ project_env_title }} -
        ctxs is not defined anywhere (neither in the main env file,
        nor in the project env file (or base env file))
    when: (project_env.ctxs | default([]) | length) == 0
    tags: ["no_print"]

  # ssh (to access the nodes)

  - name: "{{ project_title }} - project_ssh_title"
    set_fact:
      project_ssh_title: "{{ project_title }} - ssh"
      project_ssh_cloud_dir: "/main/init/cloud"
    tags: ["no_print"]

  - name: "{{ project_ssh_title }} - define node names"
    set_fact:
      project_ssh_nodes_list: []
      project_ssh_file: "{{ project_ssh_cloud_dir }}/ssh"
    tags: ["no_print"]

  - name: "{{ project_ssh_title }} - define nodes"
    set_fact:
      project_ssh_nodes_list: "{{ project_ssh_nodes_list + tmp_nodes }}"
    vars:
      tmp_nodes: "{{ project_env.main[project_item].nodes | default([]) }}"
    loop: "{{ project_env.ctxs | default([]) }}"
    loop_control:
      loop_var: project_item
    tags: ["no_print"]

  - name: "{{ project_ssh_title }} - define node names (create)"
    set_fact:
      project_ssh_nodes_all: []
    tags: ["no_print"]

  - name: "{{ project_ssh_title }} - define node names"
    set_fact:
      project_ssh_nodes_all: "{{ project_ssh_nodes_all + [tmp_node] }}"
    vars:
      tmp_node: "{{ project_item.name | default(project_item) }}"
    loop: "{{ project_ssh_nodes_list | default([]) }}"
    loop_control:
      loop_var: project_item
      label: "{{ tmp_node }}"
    tags: ["no_print"]

  - name: "{{ project_ssh_title }} - define unique node names"
    set_fact:
      project_ssh_nodes: "{{ project_ssh_nodes_all | unique }}"
    tags: ["no_print"]

  - name: "{{ project_ssh_title }} - verify unique node names"
    fail:
      project_ssh_nodes: "There are duplicated node names in your settings"
    when: (project_ssh_nodes | length) != (project_ssh_nodes_all | length)
    tags: ["no_print"]

  - name: "{{ project_ssh_title }} - create the cloud dir"
    file:
      path: "{{ project_ssh_cloud_dir }}"
      state: directory
      mode: "{{ env_dev | bool | ternary(0777, 0755) }}"

  - name: "{{ project_ssh_title }} - copy the ssh executable file to {{ project_ssh_file }}"
    template:
      src: "templates/ssh.tpl.sh"
      dest: "{{ project_ssh_file }}"
      mode: "{{ env_dev | bool | ternary(0777, 0700) }}"
    vars:
      project_ssh_ctxs: "{{ project_env.ctxs }}"
      project_ssh_default_ctx: "{{ project_env_init.params.default_ctx | default('') }}"
      project_ssh_default_node: "{{ project_env_init.params.default_node | default('') }}"


  # - name: "{{ project_title }} - env (main)"
  #   include_tasks: "tasks/env.yml"
  #   vars:
  #     repo_env_title: "{{ project_title }} - env"
  #     repo_env_file: "{{ project_env_dir }}/{{ project_env_init.repo.env_file }}"
  #     repo_env_ctx: ""
  #     repo_env_ctxs: "{{ project_env_init.repo.ctxs | default([]) }}"
  #     repo_env_dir: "{{ project_env_dir }}"
  #     repo_env_ctl: true
  #     repo_env_main_dev: "{{ env_dev }}"
  #     repo_env_repo: "{{ project_env_init.repo }}"
  #     repo_env_repo_dest: "{{ repo_dest }}"
  #   tags: ["other"]


# repo:
#     env_dir: env
#     src: ssh://git@bitbucket.org/lucasbasquerotto/ansible-env-demo.git
#     ssh_file: ssh.key
#     version: master
# repo_vault:
#     file: vault
#     force: true