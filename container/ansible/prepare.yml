- name: Play 01 - Init (Cloud)
  hosts: main
  gather_facts: no
  tasks:
    - name: "[cloud - init] - project_base_title"
      set_fact:
        project_base_title: "[cloud - init]"
        project_base_dir: "{{ env_project_dir }}"
        project_keys_file_rel: "files/ctl/vars.yml"
      tags: ["no_print"]

    - name: "{{ project_base_title }} - project directories"
      set_fact:
        project_files_cloud_dir_rel: "files/cloud"
        project_files_cloud_dir: "{{ project_base_dir }}/files/cloud"
        project_secrets_ctl_dir: "{{ project_base_dir }}/secrets/ctl"
        project_secrets_cloud_dir: "{{ project_base_dir }}/secrets/cloud"
        project_dev_repos_dir: "{{ project_base_dir }}/dev/link"
      tags: ["no_print"]

    - name: "{{ project_base_title }} - load the init environment vars"
      include_vars:
        file: "{{ project_base_dir }}/{{ project_keys_file_rel }}"
        name: project_env_init

    - name: "{{ project_base_title }} - validate the key init parameter"
      fail:
        msg: "project key not specified at {{ project_keys_file_rel }}"
      when: (project_env_init.key | default('')) == ''

    - name: "{{ project_base_title }} - project_title"
      set_fact:
        project_title: "{{ project_base_title }} [{{ project_env_init.key }}]"
        env_dev: "{{ project_env_init.dev | default(false) }}"
      tags: ["no_print"]

    - name: "{{ project_title }} - validate the repo init parameters"
      fail:
        msg: "{{ project_item }} not specified at {{ project_keys_file_rel }} under repo"
      when: (project_env_init.repo[project_item] | default('')) == ''
      loop:
        - "src"
        - "version"
      loop_control:
        loop_var: project_item

    # env repository

    - name: "{{ project_title }} - project_env_title"
      set_fact:
        project_env_title: "{{ project_title }} - environment"
      tags: ["no_print"]

    - name: "{{ project_env_title }} - env - repo (outer)"
      include_tasks: "tasks/util/repo.yml"
      vars:
        repo_title: "{{ project_env_title }} - env - repo"
        repo_main: "{{ project_env_init.repo }}"
        repo_ssh_src_dir: "{{ project_secrets_ctl_dir }}"
        repo_secrets_dir: "{{ project_secrets_ctl_dir }}"
        repo_default_dir: "{{ project_base_dir }}/env"
        repo_dev_base_dir: "{{ project_dev_repos_dir }}"
        repo_dev_path: "{{ project_env_init.path_params.path_env | default('') }}"
        repo_dev: "{{ env_dev }}"
      tags: ["no_print"]

    - name: "{{ project_base_title }} - project_env_dir"
      set_fact:
        project_env_dir: "{{ repo_dir }}"
        project_env_commit: "{{ repo_git_result.after }}"
      tags: ["no_print"]

    - name: "{{ project_env_title }} - set_fact - project_env_file"
      set_fact:
        project_env_file: "{{ project_env_dir }}/{{ project_env_init.repo.env_file }}"
      tags: ["no_print"]

    - name: "{{ project_env_title }} - load the environment vars"
      include_vars:
        file: "{{ project_env_file }}"
        name: project_env_aux
      tags: ["no_print"]

    - name: "{{ project_env_title }} - project_env"
      set_fact:
        project_env: "{{ project_env_aux }}"
      vars:
        project_name: "{{ project_env_init.key }}"
        project_ctxs: "{{ project_env_init.ctxs | default([]) }}"
        params: "{{ project_env_init.env_params | default({}) }}"
      tags: ["no_print"]

    # env base repository

    - block:
        - name: "{{ project_env_title }} - validate env base destination"
          fail:
            msg: "{{ project_env_title }} - git env base destination not defined"
          when: (project_env.env.repo_dir | default('')) == ''
          tags: ["no_print"]

        - name: "{{ project_env_title }} - set_fact - project_env_base_dir"
          set_fact:
            project_env_base_dir: "{{ project_env_dir + '/' + project_env.env.repo_dir }}"
          tags: ["no_print"]

        - name: "{{ project_env_title }} - env base - repo (outer)"
          include_tasks: "tasks/util/repo.yml"
          vars:
            repo_title: "{{ project_env_title }} - env base - repo"
            repo_main: "{{ project_env.env.repo }}"
            repo_ssh_src_dir: "{{ project_env_dir }}"
            repo_secrets_dir: "{{ project_secrets_ctl_dir }}/env-base"
            repo_default_dir: "{{ project_env_base_dir }}"
            repo_dev_base_dir: "{{ project_dev_repos_dir }}"
            repo_dev_path: "{{ project_env_init.path_params.path_env_base | default('') }}"
            repo_dev: "{{ env_dev }}"
          tags: ["no_print"]

        - name: "{{ project_env_title }} - load the base environment vars"
          include_vars:
            file: "{{ project_env_base_dir }}/{{ project_env.env.file }}"
            name: project_env_base

        - name: "{{ project_env_title }} - project_env (from base)"
          set_fact:
            project_env: "{{ project_env_base }}"
          vars:
            params: "{{ project_env }}"

      when: project_env.env is defined
      tags: ["no_print"]

    # validate environment

    - name: "{{ project_env_title }} - validate env (minimum)"
      lrd.cloud.schema:
        schema_file: "schemas/env_minimum.schema.yml"
        value: "{{ project_env }}"

    - name: "{{ project_env_title }} - validate the container"
      fail:
        msg: >-
          {{ project_env_title }} - the container specified in the project environment
          ({{ project_env.container }}) is not the container in which the project is being run
          ({{ project_env_init.init.container }})
      when: >-
        ((project_env.container | default('')) != '')
        and
        ((project_env.container | default('')) != project_env_init.init.container)
      tags: ["no_print"]

    - name: "{{ project_env_title }} - validate the migration version"
      fail:
        msg: >-
          {{ project_env_title }} - the migration version specified in the project environment
          ({{ project_env.migration }}) is not the migration version specified for the project
          in the root environment ({{ project_env_init.migration }})
      when: >-
        ((project_env.migration | default('')) != '')
        and
        ((project_env.migration | default('')) != project_env_init.migration)
      tags: ["no_print"]

    - name: "{{ project_env_title }} - validate ctx(s) - required"
      fail:
        msg: >-
          {{ project_env_title }} -
          ctxs is not defined anywhere (neither in the main env file,
          nor in the project env file (or base env file))
      when: (project_env.ctxs | default([]) | length) == 0
      tags: ["no_print"]

    # ssh (to access the nodes)

    - name: "{{ project_title }} - project_ssh_title"
      set_fact:
        project_ssh_title: "{{ project_title }} - ssh"
      tags: ["no_print"]

    - name: "{{ project_ssh_title }} - define node names"
      set_fact:
        project_ssh_nodes_list: []
      tags: ["no_print"]

    - name: "{{ project_ssh_title }} - define nodes"
      set_fact:
        project_ssh_nodes_list: "{{ project_ssh_nodes_list + tmp_nodes }}"
      vars:
        tmp_nodes: "{{ project_env.main[project_item].nodes | default([]) }}"
      loop: "{{ project_env.ctxs | default([]) }}"
      loop_control:
        loop_var: project_item
      tags: ["no_print"]

    - name: "{{ project_ssh_title }} - define node names (create)"
      set_fact:
        project_ssh_nodes_all: []
      tags: ["no_print"]

    - name: "{{ project_ssh_title }} - define node names"
      set_fact:
        project_ssh_nodes_all: "{{ project_ssh_nodes_all + [tmp_node] }}"
      vars:
        tmp_node: "{{ project_item.name | default(project_item) }}"
      loop: "{{ project_ssh_nodes_list | default([]) }}"
      loop_control:
        loop_var: project_item
        label: "{{ tmp_node }}"
      tags: ["no_print"]

    - name: "{{ project_ssh_title }} - define unique node names"
      set_fact:
        project_ssh_nodes: "{{ project_ssh_nodes_all | unique }}"
      tags: ["no_print"]

    - name: "{{ project_ssh_title }} - verify unique node names"
      fail:
        project_ssh_nodes: "There are duplicated node names in your settings"
      when: (project_ssh_nodes | length) != (project_ssh_nodes_all | length)
      tags: ["no_print"]

    - name: "{{ project_ssh_title }} - create the cloud dir"
      file:
        path: "{{ project_files_cloud_dir }}"
        state: directory
        mode: "{{ env_dev | bool | ternary(0777, 0755) }}"

    - name: "{{ project_ssh_title }} - copy the ssh executable file to {{ project_files_cloud_dir }}/"
      template:
        src: "templates/ssh.tpl.sh"
        dest: "{{ project_files_cloud_dir }}/ssh"
        mode: "{{ env_dev | bool | ternary(0777, 0700) }}"
      vars:
        project_ssh_ctxs: "{{ project_env.ctxs }}"
        project_ssh_default_ctx: "{{ project_env_init.env_params.default_ctx | default('') }}"
        project_ssh_default_node: "{{ project_env_init.env_params.default_node | default('') }}"

    # ctxs

    - name: "{{ project_title }} - project_ctxs_title"
      set_fact:
        project_ctxs_title: "{{ project_title }} - ctxs"
        project_env_params: "{{ project_env_init.env_params | default({}) }}"
        project_env_params_file_rel: "env-params.yml"
        project_path_map_repos: "{{ project_env_init.path_params.path_map_repos | default({}) }}"
        project_path_map_file_rel: "path-map.yml"
      tags: ["no_print"]

    - name: "{{ project_ctxs_title }} - create the config file with the ctl env params"
      copy:
        content: "{{ project_env_params | to_nice_yaml }}"
        dest: "{{ project_files_cloud_dir }}/{{ project_env_params_file_rel }}"
        mode: "{{ env_dev | default(false, true) | bool | ternary(0666, 0600) }}"

    - name: "{{ project_ctxs_title }} - create the config file with the repo path maps"
      copy:
        content: "{{ project_path_map_repos | to_nice_yaml }}"
        dest: "{{ project_files_cloud_dir }}/{{ project_path_map_file_rel }}"
        mode: "{{ env_dev | default(false, true) | bool | ternary(0666, 0600) }}"

    - name: "{{ project_ctxs_title }} (main)"
      include_tasks: "ctx.yml"
      vars:
        project_ctx_title: "{{ project_ctxs_title }} [{{ project_ctx_key }}]"
      loop: "{{ project_env.ctxs }}"
      loop_control:
        loop_var: project_ctx_key
      tags: ["no_print"]

    - name: "{{ project_ctxs_title }} - copy the ctxs executable file to {{ project_files_cloud_dir }}/"
      template:
        src: "templates/run-ctxs.tpl.sh"
        dest: "{{ project_files_cloud_dir }}/run-ctxs"
        mode: "{{ env_dev | bool | ternary(0777, 0700) }}"
      vars:
        project_run_ctxs_title: "{{ project_ctxs_title }}"
        project_run_ctxs_list: "{{ project_env.ctxs }}"
        project_run_ctx_cloud_dir: "{{ project_files_cloud_dir }}"
