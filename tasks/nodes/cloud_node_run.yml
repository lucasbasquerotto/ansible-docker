# Main Service

- name: "{{ cloud_node_item_title }} - main service (outer)"
  include_tasks: "tasks/services/cloud_service.yml"
  vars:
    tmp_service: "{{ cloud_node_item.prepared_service | default({}) }}"
    cloud_service_title: "{{ cloud_node_item_title }} - main service"
    cloud_service_prepared_list: "{{ [tmp_service] }}"
    cloud_service_top: true
    cloud_service_tmp_dir: "{{ cloud_node_item.tmp_dir }}/services"
    cloud_service_state: "{{ cloud_node_item_state }}"
  tags: ["no_print_skipped"]

- name: "{{ cloud_node_item_title }} - verify if there is a node result"
  fail:
    msg: >-
      the result after calling the node service ({{ tmp_service_name }})
      was not found or doesn't have a "hosts" property
  vars:
    tmp_service: "{{ cloud_node_item.prepared_service | default({}) }}"
    tmp_service_name: "{{ tmp_service.name | default('') }}"
    tmp_result_item: >-
      {{ cloud_service_result_inner_map[tmp_service_name] | default({}) }}
  when: tmp_result_item.hosts is not defined
  tags: ["no_print"]

- name: "{{ cloud_node_item_title }} - cloud_node_hosts"
  set_fact:
    cloud_node_hosts: "{{ tmp_result_item.hosts }}"
  vars:
    tmp_service: "{{ cloud_node_item.prepared_service | default({}) }}"
    tmp_service_name: "{{ tmp_service.name | default('') }}"
    tmp_result_item: >-
      {{ cloud_service_result_inner_map[tmp_service_name] | default({}) }}
  tags: ["no_print"]

- name: "{{ cloud_node_item_title }} - validate the node service result schema"
  lrd.cloud.schema:
    schema_file: "schemas/node_services_result.schema.yml"
    value: "{{ cloud_node_hosts }}"

- name: "{{ cloud_node_item_title }} - cloud_node_active_hosts"
  set_fact:
    cloud_node_active_hosts: >-
      {{
        cloud_node_hosts
        | selectattr('state', 'equalto', 'present')
        | list
      }}
  tags: ["no_print"]

# DNS

- name: "{{ cloud_node_item_title }} - dns (outer)"
  include_tasks: "cloud_node_dns.yml"
  vars:
    cloud_node_dns_host: "{{ cloud_node_active_hosts[0] | default({}) }}"
  loop: "{{ cloud_node_params.dns_service_params_list | default([]) }}"
  loop_control:
    loop_var: cloud_node_dns_item
    label: "{{ cloud_node_dns_item.record | default('') }}"
  when: >-
    (cloud_node_node.dns_service | default('') != '')
    and
    ((cloud_node_active_hosts | length) = 1)
    and
    (
      ((cloud_node_state | default('present', true)) == 'present')
      or
      (cloud_node_dns_item.can_destroy | default(false) | bool)
    )
  tags: ["no_print_skipped"]

### Hosts File (Inventory) ###

- name: "{{ cloud_node_item_title }} - cloud_node_hosts_info - init"
  set_fact:
    cloud_node_hosts_info: ""
  tags: ["no_print"]

- name: "{{ cloud_node_item_title }} - cloud_node_hosts_info - fill"
  set_fact:
    cloud_node_hosts_info: >-
      {{ cloud_node_hosts_info }}

      {{ tmp_item.name }}
      {{
        (tmp_item.local | default(false) | bool)
        | ternary('ansible_connection=local', '')
      }}
      {{
        (tmp_item.local | default(false) | bool)
        | ternary('', 'ansible_host=' + tmp_host)
      }}
      ansible_user={{ cloud_node_credential.host_user }}
      {{
        (tmp_host_pass != '')
        | ternary('ansible_become_pass=' + tmp_host_pass, '')
      }}
      {{
        (cloud_node_ssh_key_path != '')
        | ternary('ansible_ssh_private_key_file=' + cloud_node_ssh_key_path, '')
      }}
      instance_type={{ cloud_node_name }}
      instance_index={{ tmp_idx + 1 }}
      {{
        (tmp_public_ipv4 != '')
        | ternary('instance_public_ipv4=' + tmp_public_ipv4, '')
      }}
      {{
        (tmp_public_ipv6 != '')
        | ternary('instance_public_ipv6=' + tmp_public_ipv6, '')
      }}
      {{
        (tmp_private_ip != '')
        | ternary('instance_private_ip=' + tmp_private_ip, '')
      }}
  vars:
    tmp_host_pass: "{{ cloud_node_credential.host_pass | default('') }}"
    tmp_public_ipv4: "{{ tmp_item.public_ipv4 | default('') }}"
    tmp_public_ipv6: "{{ tmp_item.public_ipv6 | default('') }}"
    tmp_private_ip: "{{ tmp_item.private_ip | default('') }}"
    tmp_host: "{{ tmp_public_ipv4 | default(tmp_public_ipv6) }}"
  loop: "{{ cloud_node_active_hosts | list }}"
  loop_control:
    index_var: tmp_idx
    loop_var: tmp_item
    label: "{{ tmp_item.name }}"
  tags: ["no_print"]

- name: "{{ cloud_node_item_title }} - update the hosts file with the generated hosts"
  blockinfile:
    path: "{{ inventory_file }}"
    marker: "# {mark} ANSIBLE MANAGED BLOCK - {{ cloud_node_name }}"
    insertafter: "\\[{{ cloud_node_name }}\\]"
    block: "{{ cloud_node_hosts_info }}"
  tags: ["no_print_skipped"]

- name: "{{ cloud_node_item_title }} - refresh inventory"
  meta: refresh_inventory
  tags: ["no_print_skipped"]
