# Main Vars and Validations

- name: "{{ cloud_service_inner_title }} - cloud_node_item_info_map"
  set_fact:
    cloud_node_item_info_map: >-
      {{ (cloud_node_info is mapping) | ternary(cloud_node_info, {}) }}
  tags: ["no_print"]

- name: "{{ cloud_node_item_title }} - cloud_node_info_allowed_props"
  set_fact:
    cloud_node_info_allowed_props:
      - "name"
      - "key"
      - "single"
      - "hostname"
      - "amount"
      - "max_amount"
      - "params"
      - "group_params"
      - "shared_params"
      - "shared_group_params"
      - "tmp"
      - "can_destroy"
  tags: ["no_print"]

- name: "{{ cloud_node_item_title }} - validate the node info props"
  fail:
    msg: |
      Invalid property defined for node info
      Property: {{ tmp_item.key }}
      Allowed:
      {{ cloud_node_info_allowed_props | to_nice_yaml }}
      Item:
      {{ cloud_node_item_info_map | to_nice_yaml }}
  when: tmp_item.key not in cloud_node_info_allowed_props
  loop: "{{ cloud_node_item_info_map | dict2items | list }}"
  loop_control:
    loop_var: tmp_item
    label: "{{ tmp_item.key }}"
  tags: ["no_print_skipped"]

- name: "{{ cloud_node_item_title }} - verify if the node exists"
  fail:
    msg: "Invalid node: {{ cloud_node_key }}"
  when: cloud_node_key not in (env.nodes | default({}))
  tags: ["no_print_skipped"]

- name: "{{ cloud_node_item_title }} - cloud_node_node"
  set_fact:
    cloud_node_node: "{{ env.nodes[cloud_node_key] }}"
  tags: ["no_print"]

- name: "{{ cloud_node_item_title }} - cloud_node_allowed_props"
  set_fact:
    cloud_node_allowed_props:
      - "service"
      - "dns_service"
      - "credential"
      - "params"
      - "group_params"
      - "shared_params"
      - "shared_group_params"
  tags: ["no_print"]

- name: "{{ cloud_node_item_title }} - validate the node props"
  fail:
    msg: |
      Invalid property defined for node
      Property: {{ tmp_item.key }}
      Allowed:
      {{ cloud_node_allowed_props | to_nice_yaml }}
      Item:
      {{ cloud_node_node | to_nice_yaml }}
  when: tmp_item.key not in cloud_node_allowed_props
  loop: "{{ cloud_node_node | dict2items | list }}"
  loop_control:
    loop_var: tmp_item
    label: "{{ tmp_item.key }}"
  tags: ["no_print_skipped"]

- name: "{{ cloud_node_item_title }} - cloud_node_required_props"
  set_fact:
    cloud_node_required_props:
      - "service"
      - "credential"
  tags: ["no_print"]

- name: "{{ cloud_node_item_title }} - validate the node props"
  fail:
    msg: |
      Required property not defined for node
      Property: {{ tmp_item.key }}
      Required:
      {{ cloud_node_required_props | to_nice_yaml }}
      Item:
      {{ cloud_node_node | to_nice_yaml }}
  when: tmp_item.key not in cloud_node_node
  loop: "{{ cloud_node_required_props | dict2items | list }}"
  loop_control:
    loop_var: tmp_item
    label: "{{ tmp_item.key }}"
  tags: ["no_print_skipped"]

- name: "{{ cloud_node_item_title }} - verify if the node credential exists"
  fail:
    msg: "Invalid credential: {{ cloud_node_node.credential }}"
  when: >-
    ((cloud_node_node.credential | default('')) != '')
    and
    (cloud_node_node.credential not in (env.credentials | default({})))
  tags: ["no_print_skipped"]

- name: "{{ cloud_node_item_title }} - cloud_node_node"
  set_fact:
    cloud_node_credential: >-
      {{
        env.credentials[cloud_node_node.credential | default('')] | default({})
      }}
  tags: ["no_print"]

- name: "{{ cloud_node_item_title }} - cloud_node_credential_allowed_props"
  set_fact:
    cloud_node_credential_allowed_props:
      - "ssh_file"
      - "ssh_file_encrypted"
      - "host_user"
      - "host_pass"
      - "host_ssh_public_keys_path"
  tags: ["no_print"]

- name: "{{ cloud_node_item_title }} - validate the node credential allowed props"
  fail:
    msg: |
      Invalid property defined for node credential
      Property: {{ tmp_item.key }}
      Allowed:
      {{ cloud_node_credential_allowed_props | to_nice_yaml }}
      Item Keys:
      {{ cloud_node_credential | dict2items | list | to_nice_yaml }}
  when: tmp_item.key not in cloud_node_credential_allowed_props
  loop: "{{ cloud_node_credential | dict2items | list }}"
  loop_control:
    loop_var: tmp_item
    label: "{{ tmp_item.key }}"
  tags: ["no_print_skipped"]

- name: "{{ cloud_node_item_title }} - cloud_node_credential_required_props"
  set_fact:
    cloud_node_credential_required_props:
      - "host_user"
  tags: ["no_print"]

- name: "{{ cloud_node_item_title }} - validate the node credential required props"
  fail:
    msg: |
      Required property not defined for node credential
      Property: {{ tmp_item.key }}
      Required:
      {{ cloud_node_credential_required_props | to_nice_yaml }}
      Item Keys:
      {{ cloud_node_credential | dict2items | list | to_nice_yaml }}
  when: tmp_item.key not in cloud_node_credential
  loop: "{{ cloud_node_credential_required_props | dict2items | list }}"
  loop_control:
    loop_var: tmp_item
    label: "{{ tmp_item.key }}"
  tags: ["no_print_skipped"]

### Cloud Node Params ###

- name: "{{ cloud_node_item_title }} - ensure the inventory contains {{ '[' + cloud_node_name + ']' }}"
  lineinfile:
    name: "{{ inventory_file }}"
    line: "{{ '[' + cloud_node_name + ']' }}"
    state: present
  check_mode: yes
  register: cloud_node_conf
  failed_when: cloud_node_conf is failed
  tags: ["no_print_skipped"]

- name: "{{ cloud_node_item_title }} - ensure the inventory contains {{ '[' + cloud_node_name + ']' }}"
  fail:
    msg: "Ensure the inventory file contains a line with {{ '[' + cloud_node_name + ']' }}"
  when: cloud_node_conf is changed
  tags: ["no_print"]

- name: "{{ cloud_node_item_title }} - generate node params (outer)"
  include_tasks: "tasks/util/params_mixer.yml"
  vars:
    params_mixer_title: "{{ cloud_node_item_title }} - generate node params"
    params_mixer_main_params: "{{ cloud_node_node.params | default({}) }}"
    params_mixer_group_params_names: "{{ cloud_node_node.group_params | default({}) }}"
    params_mixer_shared_params_names: "{{ cloud_node_node.shared_params | default([]) }}"
    params_mixer_shared_group_params_name: "{{ cloud_node_node.shared_group_params | default('') }}"
    params_mixer_shared_group_params_names_dict: "{{ env.shared_group_params | default({}) }}"
    params_mixer_shared_params_names_dict: "{{ env.node_shared_params | default({}) }}"
    params_mixer_group_params_dict: "{{ env.node_group_params | default({}) }}"
  tags: ["no_print"]

- name: "{{ cloud_node_item_title }} - cloud_node_params (tmp)"
  set_fact:
    cloud_node_params: "{{ params_mixer_params }}"
  tags: ["no_print"]

- name: "{{ cloud_node_item_title }} - generate node ctx params (outer)"
  include_tasks: "tasks/util/params_mixer.yml"
  vars:
    params_mixer_title: "{{ cloud_node_item_title }} - generate node ctx params"
    params_mixer_main_params: "{{ cloud_node_info.params | default({}) }}"
    params_mixer_group_params_names: "{{ cloud_node_info.group_params | default({}) }}"
    params_mixer_shared_params_names: "{{ cloud_node_info.shared_params | default([]) }}"
    params_mixer_shared_group_params_name: "{{ cloud_node_info.shared_group_params | default('') }}"
    params_mixer_shared_group_params_names_dict: "{{ env.shared_group_params | default({}) }}"
    params_mixer_shared_params_names_dict: "{{ env.node_shared_params | default({}) }}"
    params_mixer_group_params_dict: "{{ env.node_group_params | default({}) }}"
  tags: ["no_print"]

- name: "{{ cloud_node_item_title }} - cloud_node_info_params"
  set_fact:
    cloud_node_info_params: "{{ params_mixer_params }}"
  tags: ["no_print"]

- name: "{{ cloud_node_item_title }} - cloud_node_params"
  set_fact:
    cloud_node_params: >-
      {{ cloud_node_params | combine(cloud_node_info_params) }}
  tags: ["no_print"]

### User Data ###

- name: "{{ cloud_node_item_title }} - cloud_node_user_data (outer)"
  set_fact:
    cloud_node_user_data_task: >-
      {{ cloud_node_params.user_data_task | default('cloud_node_user_data.yml') }}
    cloud_node_user_data: ""
  tags: ["no_print"]

- name: "{{ cloud_node_item_title }} - cloud_node_user_data (outer)"
  include_tasks: "{{ cloud_node_user_data_task }}"
  when: (cloud_node_params.user_data_file | default('')) != ''

### SSH Vars ###

- name: "{{ cloud_node_item_title }} - cloud_node_ssh_key_filename"
  set_fact:
    cloud_node_ssh_key_filename: "{{ cloud_node_name + '.key' }}"
  tags: ["no_print"]

- name: "{{ cloud_node_item_title }} - cloud_node_ssh_key_path"
  set_fact:
    cloud_node_ssh_file: >-
      {{
        cloud_node_credential.ssh_file | default('')
        | ternary(
          env_dir + '/' +
            (cloud_node_credential.ssh_file | default('')),
            ''
          )
      }}
    cloud_node_ssh_key_path: >-
      {{
        ((cloud_node_credential.ssh_file | default('')) != '')
        | ternary(cloud_node_tmp_dir + '/' + cloud_node_ssh_key_filename, '')
      }}
  tags: ["no_print"]

### SSH File ###

- name: >-
    {{ cloud_node_item_title }} - create the ssh key file dir -
    {{ cloud_node_ssh_key_path | dirname }}
  file:
    path: "{{ cloud_node_ssh_key_path | dirname }}"
    state: directory
    mode: 0755
  tags: ["no_print_skipped"]

- name: "{{ cloud_node_item_title }} - generate the ssh key file - {{ cloud_node_ssh_key_path }}"
  copy:
    src: "{{ cloud_node_ssh_file }}"
    dest: "{{ cloud_node_ssh_key_path }}"
    decrypt: "{{ cloud_node_credential.ssh_file_encrypted | default(false) | bool }}"
    mode: 0600
  tags: ["no_print_skipped"]

# Main Service

- name: "{{ cloud_node_item_title }} - run (outer)"
  include_tasks: "cloud_node_run.yml"
  when: (main_tmp_services | length) > 0
  tags: ["no_print_skipped"]
