root: "env"
schemas:
  env:
    type: "dict"
    description: "environment schema for a deployment / project"
    props:
      name:
        non_empty: true
        type: "str"
        description: "name of the project"
      ctxs:
        required: true
        type: "list"
        elem_type: "str"
        description: "list with the context names that will be executed for this deployment"
      migration:
        type: "str"
        description: >-
          migration identifier; when specified, throws an error if
          it's not specified in the controller parameters, or is different
      container:
        type: "str"
        description: >-
          container image + tag that identifies the container in which
          the deployment will execute; when specified, throws an error if
          it's not specified in the controller parameters, or is different
      ctl_env_schema:
        type: "str"
        description: >-
          schema to validate the environment parameters defined for the project
          in the main environment repository vars.yml file when defined in the
          project environment repository file; will be applied for all contexts
      original_env_schema:
        type: "str"
        description: >-
          schema to validate the environment parameters defined for the project
          in the project environment repository file when defined in the base
          environment repository file; will be applied for all contexts
      meta:
        schema: "meta"
        description: "environment metadata"
      main:
        non_empty: true
        type: "map"
        elem_schema: "main"
        description: "dictionary with the environment contexts (that define the deployment)"
      services:
        type: "map"
        elem_schema: "service"
        description: "dictionary with definitions of services"
      service_shared_group_params:
        type: "map"
        elem_schema: "shared_group_params"
        description: "services shared_group_params"
      service_shared_params:
        type: "map"
        elem_type: "dict"
        description: "services shared_params"
      service_group_params:
        type: "dict"
        description: "services group_params"
      nodes:
        type: "map"
        elem_schema: "node"
        description: "dictionary with definitions of nodes"
      node_shared_group_params:
        type: "map"
        elem_schema: "shared_group_params"
        description: "nodes shared_group_params"
      node_shared_params:
        type: "map"
        elem_type: "dict"
        description: "nodes shared_params"
      node_group_params:
        type: "dict"
        description: "nodes group_params"
      pods:
        type: "map"
        elem_schema: "pod"
        description: "dictionary with definitions of pods"
      pod_shared_group_params:
        type: "map"
        elem_schema: "shared_group_params"
        description: "pods shared_group_params"
      pod_shared_params:
        type: "map"
        elem_type: "dict"
        description: "pods shared_params"
      pod_group_params:
        type: "dict"
        description: "pods group_params"
      run_stages:
        type: "map"
        elem_schema: "run_stage_tasks"
        description: >-
          dictionary with definitions of run stages; a run stage is a list of run stage tasks
      run_stage_tasks:
        type: "map"
        elem_schema: "run_stage_task"
        description: >-
          dictionary with definitions of run stage tasks; a run stage task has information
          about a task and the nodes and pods in which the task will run
      tasks:
        type: "map"
        elem_schema: "task"
        description: >-
          dictionary with definitions of tasks; these tasks my be declarative tasks
          or shell tasks that will execute in a node or pod, but don't know in which node
          or pod it will run
      task_shared_group_params:
        type: "map"
        elem_schema: "shared_group_params"
        description: "tasks shared_group_params"
      task_shared_params:
        type: "map"
        elem_type: "dict"
        description: "tasks shared_params"
      task_group_params:
        type: "dict"
        description: "tasks group_params"
      contents:
        type: "map"
        elem_schema: "content"
        description: >-
          dictionary with definitions of contents; used for contents with type 'env'
      content_shared_group_params:
        type: "map"
        elem_schema: "shared_group_params"
        description: "contents shared_group_params"
      content_shared_params:
        type: "map"
        elem_type: "dict"
        description: "contents shared_params"
      content_group_params:
        type: "dict"
        description: "contents group_params"
      repos:
        type: "map"
        non_empty: true
        elem_schema: "repo"
        elem_non_empty: true
        description: "dictionary with definitions of source control repositories"
      credentials:
        type: "dict"
        description: >-
          dictionary with definitions of credentials; work similarly to group_params,
          in which credetials sections in other parts of the environment have properties
          whose values will be mapped to the credentials in this dictionary
  meta:
    type: "dict"
    props:
      lax:
        type: "bool"
      template_no_empty_lines:
        type: "bool"
  main:
    type: "dict"
    description: "context schema"
    props:
      repo:
        non_empty: true
        type: "str"
        description: "repository name of the cloud layer"
      env_repos:
        type: "list"
        elem_schema: "repo_info"
        description: >-
          list with repository names that extends the main repository of the cloud
          layer and the directories in which the repositories will be cloned
          (relative to the cloud repository)
      ctl_env_schema:
        type: "str"
        description: >-
          schema to validate the environment parameters defined for the project
          in the main environment repository vars.yml file when defined in the
          project environment repository file; will be applied only for this context
      original_env_schema:
        type: "str"
        description: >-
          schema to validate the environment parameters defined for the project
          in the project environment repository file when defined in the base
          environment repository file; will be applied only for this context
      cfg:
        schema: "content"
        description: >-
          content that will define the ansible configuration file for this context
          (otherwise a default configuration file will be created)
      hosts:
        non_empty: true
        schema: "content"
        description: >-
          content that will define the ansible hosts file for this context
      hooks:
        schema: "hooks"
        description: >-
          hooks defining tasks that will run before or after certain stages
          in the deployment
      initial_services:
        type: "list"
        elem_schema: "main_service_info"
        description: "services that will run at the beginning of the deployment"
      nodes:
        type: "list"
        elem_schema: "main_node_info"
        description: "nodes/hosts that will be created/destroyed"
      final_services:
        type: "list"
        elem_schema: "main_service_info"
        description: "services that will run at the end of the deployment"
      run_stages:
        type: "list"
        elem_schema: "main_stage_info"
        description: "list with run stages for this context"
      extra_repos:
        type: "list"
        elem_schema: "main_extra_repo_info"
        description: "extra source control repositories that will be cloned locally"
  repo_info:
    type: "dict"
    description: "mapped repository (relative to a location) schema"
    props:
      repo:
        non_empty: true
        type: "str"
        description: "repository name"
      dir:
        non_empty: true
        type: "str"
        description: "path to directory in which the repository will be cloned"
  hooks:
    type: "dict"
    description: "hooks schema"
    props:
      before_initial_services:
        type: "str"
        description: "path to task that should run before deploying the initial services"
      after_initial_services:
        type: "str"
        description: "path to task that should run after deploying the initial services"
      before_nodes:
        type: "str"
        description: "path to task that should run before creating the nodes/hosts"
      after_nodes:
        type: "str"
        description: "path to task that should run after creating the nodes/hosts"
      before_wait_nodes:
        type: "str"
        description: "path to task that should run before waiting for the nodes/hosts to be ready"
      after_wait_nodes:
        type: "str"
        description: "path to task that should run after waiting for the nodes/hosts to be ready"
      before_prepare_nodes:
        type: "str"
        description: "path to task that should run before preparing the nodes/hosts"
      after_prepare_nodes:
        type: "str"
        description: "path to task that should run after preparing the nodes/hosts"
      before_prepare_pods:
        type: "str"
        description: "path to task that should run before preparing the pods"
      after_prepare_pods:
        type: "str"
        description: "path to task that should run after preparing the pods"
      before_cron:
        type: "str"
        description: "path to task that should run before defining the cron jobs for the nodes/hosts"
      after_cron:
        type: "str"
        description: "path to task that should run after defining the cron jobs for the nodes/hosts"
      before_final_services:
        type: "str"
        description: "path to task that should run before deploying the final services"
      after_final_services:
        type: "str"
        description: "path to task that should run after deploying the final services"
      before_delete_tmp:
        type: "str"
        description: "path to task that should run before destroying the temporary services and hosts (with tmp=true)"
      after_delete_tmp:
        type: "str"
        description: "path to task that should run after destroying the temporary services and hosts (with tmp=true)"
      before_delete_main:
        type: "str"
        description: "path to task that should run before destroying the services and hosts (with can_destroy=true)"
      after_delete_main:
        type: "str"
        description: "path to task that should run after destroying the services and hosts (with can_destroy=true)"
  main_service_info:
    type: "simple_dict"
    alternative_type: "str"
    description: >-
      schema for the information about a given service defined directly in the context;
      when defined as a string, it will consider the value to be the service name
    props:
      name:
        non_empty: true
        type: "str"
        description: >-
          service name, used to identify the service while running it;
          it must be unique in a list of services, otherwise an error will be thrown;
          used as the service key, when the key is not specified
      key:
        type: "str"
        description: >-
          service key, used to identify the service in the services dictionary;
          when not specified, the name will be used as the service key
      single:
        type: "bool"
        description: >-
          the service must be a single service, and not a list of services;
          useful in cases in which the service output will be used as input by another service
          (the service name is used to retrieve the previous service input, but in a list,
          the name of the service whose output should be used may not be known directly)
      absent:
        type: "bool"
        description: "when true, deploy the service with the state absent (to destroy the service)"
      tmp:
        type: "bool"
        description: >-
          when true, destroy the service (deploy with state=absent) at the end of the deployment
      can_destroy:
        type: "bool"
        description: >-
          when true, destroy the service (deploy with state=absent) at the end of the deployment
          when the deployment was launched with the --end option (or --tags=destroy)
      params:
        type: "dict"
        description: >-
          params to override the service parameters;
          can only be used for single (non-list) services
      group_params:
        type: "map"
        elem_type: "str"
        description: >-
          group_params to override the service parameters;
          can only be used for single (non-list) services
      shared_params:
        type: "list"
        elem_type: "str"
        description: >-
          shared_params to override the service parameters;
          can only be used for single (non-list) services
      shared_group_params:
        type: "str"
        description: >-
          shared_group_params to override the service parameters;
          can only be used for single (non-list) services
  main_node_info:
    type: "simple_dict"
    alternative_type: "str"
    description: >-
      schema for the information about a given node; when defined as a string,
      it will consider the value to be the name
    props:
      name:
        non_empty: true
        type: "str"
        description: >-
          node name, used to identify the node while running it;
          it must be unique in a list of nodes, otherwise an error will be thrown;
          used as the node key, when the key is not specified
      key:
        type: "str"
        description: >-
          node key, used to identify the node in the nodes dictionary;
          when not specified, the name will be used as the node key
      local:
        type: "bool"
        description: >-
          when true, means that the node is local;
          used to run the node locally without deploying a remote node;
          a local node doesn't need a service specified in it (and even if it has,
          it will just be ignored; dns service will also be ignored)
      local_host_test:
        type: "bool"
        description: >-
          by default, a local node skips the step that checks if it can be connected;
          when this property is true, this step will be executed for the local node
          (mainly used for tests, and to make development environments closer to
          staging and production ones)
      local_host_test_error:
        type: "str"
        choices: ["timeout", "msg"]
        description: >-
          only used when local_host_test is true, in which case, by default,
          the host test (wait nodes) step is executed successfully;
          when this property is true, it will throw an error when testing for the
          timeout or the final success message in the host, according to the value
          passed to this property (mainly used for tests)
      external:
        type: "bool"
        description: >-
          when true, means that the node is managed externally;
          used to run tasks in the node and create pods;
          an external node doesn't need a service specified in it (and even if it has,
          it will just be ignored; dns service will also be ignored)
      hostname:
        type: "str"
        description: >-
          when this property is specified, it will identify the host name;
          by default, the name of the host will be the value of the 'name' property
          with a '-host' suffix added (because the node name is used to identify
          the node type, which will be the ansible group, that should be different
          than the ansible host);
          when a node has replicas, that is, more than 1 host for a given node type,
          a suffix '-{index}', where index is the replica index, starting with 1,
          will be added to the host name from the 2nd replica onwards, no matter if
          this hostname property was specified or not (the 1st replica will have the
          hostname without this suffix, so it will have the same name even if newer
          deployments changes the number of replicas)
      amount:
        type: "int"
        description: >-
          amount of node replicas to be created; defaults to 1;
          must be more or equal to 0, and less or equal to max_amount
      max_amount:
        type: "int"
        description: >-
          maximum amount of node replicas to be created/destroyed; defaults to amount;
          when 0, no hosts will be created/destroyed; each replica that has an index
          higher than amount will be destroyed (state=absent); this way, replicas created
          in a previous deployment can
      transfer:
        type: "list"
        elem_schema: "transfer_content"
        description: >-
          contents to be transferred to the node directory in the host (defined by node_dir);
          overrides contents to be transferred defined in the node that have the same destination;
      pods:
        type: "map"
        elem_schema: "main_pod_params_info"
        description: >-
          dictionary in which the keys are pod names defined in the host, and the values may
          be mergeable parameters to override the parameters for the pod defined in the node,
          and also contents to be transferred, to override those defined in the pod information
          in the node
      dependencies:
        type: "list"
        elem_type: "unknown"
        description: "TODO"
      absent:
        type: "bool"
        description: "when true, deploy the node with the state absent (to destroy the node replicas)"
      tmp:
        type: "bool"
        description: >-
          when true, destroy the node replicas (deploy with state=absent) at the end of the deployment
      can_destroy:
        type: "bool"
        description: >-
          when true, destroy the node replicas (deploy with state=absent) at the end of the deployment
          when the deployment was launched with the --end option (or --tags=destroy)
      params:
        type: "dict"
        description: "params to override the node parameters"
      group_params:
        type: "map"
        elem_type: "str"
        description: "group_params to override the node parameters"
      shared_params:
        type: "list"
        elem_type: "str"
        description: "shared_params to override the node parameters"
      shared_group_params:
        type: "str"
        description: "shared_group_params to override the node parameters"
  main_stage_info:
    type: "simple_dict"
    alternative_type: "str"
    description: >-
      run stages information schema; when it's a string, will use the run stage defined in the run_stages
      dictionary (at the topmost layer in the environment file), otherwise it will be an object with a
      'tasks' property
    props:
      tasks:
        schema: "run_stage_tasks"
        required: true
        description: "run stage tasks"
  main_extra_repo_info:
    type: "dict"
    description: "extra repository information schema"
    props:
      repo:
        non_empty: true
        type: "str"
        description: "extra repository name"
      dir:
        non_empty: true
        type: "str"
        description: "extra repository directory"
      transfer:
        type: "list"
        elem_schema: "transfer_content"
        description: "contents to be transferred to the extra repository directory"
      links:
        type: "list"
        elem_schema: "main_extra_repo_link"
        description: "symlinks to be created in the extra repository directory"
  main_pod_params_info:
    type: "dict"
    description: "pod context information schema"
    props:
      transfer:
        type: "list"
        elem_schema: "transfer_content"
        description: >-
          contents to be transferred to the pod repository directory;
          override those defined in the pod information in the node
          that have the same destination; the base directory (when the content type is
          'custom', is the pod repository directory)
      params:
        type: "dict"
        description: "params to override the pod information parameters in the node"
      group_params:
        type: "map"
        elem_type: "str"
        description: "group_params to override the pod information parameters in the node"
      shared_params:
        type: "list"
        elem_type: "str"
        description: "shared_params to override the pod information parameters in the node"
      shared_group_params:
        type: "str"
        description: "shared_group_params to override the pod information parameters in the node"
  main_extra_repo_link:
    type: "dict"
    description: "extra repository symlink schema"
    props:
      repo:
        type: "str"
        description: >-
          extra repository whose directory will be the base path for the symlink source (src);
          when not specified, it will be the current extra repository
      src:
        required: true
        type: "str"
        description: "where the symlink will point to"
      dest:
        non_empty: true
        type: "str"
        description: "where the symlink will be created"
  transfer_content:
    type: "dict"
    description: "schema for contents to be transferred"
    props:
      src:
        non_empty: true
        schema: "content"
        description: >-
          the source is the content; the base path (when type=custom)
          depends on where it is defined
      dest:
        non_empty: true
        type: "str"
        description: >-
          the destination file of the content; the base path
          depends on where it is defined
      mode:
        type: "int"
        description: "the permissions the resulting file should have"
      when:
        type: "bool"
        description: "don't do the transfer when false (the default is true)"
  service:
    type: "dict"
    description: "service schema"
    props:
      list:
        type: "bool"
        description: >-
          when true, specifies that the service is a list of services;
          defaults to false
      services:
        type: "list"
        elem_schema: "service_info"
        description: "list of services informations (when list=true)"
      base_dir:
        type: "str"
        description: >-
          (when list=false) service base directory to locate the service task;
          will be passed to the service task as a variable that can be used
          include other tasks relative to this base path
      task:
        type: "str"
        description: >-
          (when list=false) service task (will deploy the service when
          state=present and destroy it when state=absent); the path should be
          relative to 'base_dir'
      namespace:
        type: "str"
        description: >-
          (when list=false) the namespace used as prefix when creating ansible
          facts in the service task (when a service calls another with the same
          namespace, it will throw an error with this information, which could,
          otherwise, cause unexpected problems due to facts overriden by an inner
          service, because ansible facts are global to the host); although not
          required in this schema, services may enforce the use of namespace
      schema:
        type: "str"
        description: >-
          (when list=false) service task schema (will validate the parameters,
          credentials and contents that will be passed to the service);
          the path should be relative to 'base_dir'
      credentials:
        type: "map"
        elem_type: "str"
        description: >-
          (when list=false) service credential names dictionary (used as group_params)
      contents:
        type: "map"
        elem_schema: "content"
        description: "(when list=false) service contents dictionary"
      params:
        type: "dict"
        description: "(when list=false) service params (mergeable parameters)"
      group_params:
        type: "map"
        elem_type: "str"
        description: "(when list=false) service group_params (mergeable parameters)"
      shared_params:
        type: "list"
        elem_type: "str"
        description: "(when list=false) service shared_params (mergeable parameters)"
      shared_group_params:
        type: "str"
        description: "(when list=false) service shared_group_params (mergeable parameters)"
  service_info:
    type: "simple_dict"
    alternative_type: "str"
    description: >-
      schema for the information about a given service;
      when defined as a string, it will consider the value to be the service name
    props:
      name:
        non_empty: true
        type: "str"
        description: >-
          service name, used to identify the service while running it;
          it must be unique in a list of services, otherwise an error will be thrown;
          used as the service key, when the key is not specified
      key:
        type: "str"
        description: >-
          service key, used to identify the service in the services dictionary;
          when not specified, the name will be used as the service key
      single:
        type: "bool"
        description: >-
          the service must be a single service, and not a list of services;
          useful in cases in which the service output will be used as input by another service
          (the service name is used to retrieve the previous service input, but in a list,
          the name of the service whose output should be used may not be known directly)
      absent:
        type: "bool"
        description: "when true, deploy the service with the state absent (to destroy the service)"
      params:
        type: "dict"
        description: >-
          params to override the service parameters;
          can only be used for single (non-list) services
      group_params:
        type: "map"
        elem_type: "str"
        description: >-
          group_params to override the service parameters;
          can only be used for single (non-list) services
      shared_params:
        type: "list"
        elem_type: "str"
        description: >-
          shared_params to override the service parameters;
          can only be used for single (non-list) services
      shared_group_params:
        type: "str"
        description: >-
          shared_group_params to override the service parameters;
          can only be used for single (non-list) services
  node:
    type: "dict"
    props:
      service:
        type: "str"
        description: >-
          service that will create/destroy the node; required when the node is not local
          nor external, ignored otherwise
      dns_service:
        type: "str"
        description: >-
          service that will create/destroy the node dns records (based on the ips of the created node);
          throws and error when specified and there is more than 1 node replica;
          throws and error when specified and dns_service_params_list is not defined or empty;
          ignored when the node is local or external
      base_dir:
        type: "str"
        description: >-
          node base directory in the host for remote nodes; this directory is used as the base
          directory for node_dir (when not specified), tmp_dir (when not specified)
          and also for the node pods
      node_dir:
        type: "str"
        description: >-
          node directory in the host; this directory is used to transfer node contents (transfer)
          and is the directory from which node shell tasks are executed;
          defaults to '<base_dir>/.node' for remote nodes
      tmp_dir:
        type: "str"
        description: >-
          node directory for temporary files in the host;
          defaults to '<base_dir>/.tmp' for remote nodes
      transfer:
        type: "list"
        elem_schema: "transfer_content"
        description: >-
          contents to be transferred to the node directory in the host (defined by node_dir);
          these contents will create files in the host that can be used to store host specific
          information or be scripts that may execute tasks in the node, for example
      pods:
        type: "list"
        elem_schema: "node_pod_info"
        description: "list of pods to be deployed in the node"
      credential:
        type: "str"
        description: "node credential name (used as a single group_param)"
      params:
        type: "dict"
        description: "node params (mergeable parameters)"
      group_params:
        type: "map"
        elem_type: "str"
        description: "node group_params (mergeable parameters)"
      shared_params:
        type: "list"
        elem_type: "str"
        description: "node shared_params (mergeable parameters)"
      shared_group_params:
        type: "str"
        description: "node shared_group_params (mergeable parameters)"
  node_pod_info:
    type: "simple_dict"
    alternative_type: "str"
    description: >-
      schema for the information about a given pod;
      when defined as a string, it will consider the value to be the pod name
    props:
      name:
        non_empty: true
        type: "str"
        description: >-
          pod name, used to identify the pod while running it;
          it must be unique in a list of pods, otherwise an error will be thrown;
          used as the pod key, when the key is not specified
      key:
        type: "str"
        description: >-
          pod key, used to identify the pod in the pods dictionary;
          when not specified, the name will be used as the pod key
      transfer:
        type: "list"
        elem_schema: "transfer_content"
        description: >-
          contents to be transferred to the pod repository directory in the host;
          overrides contents to be transferred defined in the pod that have the same destination;
      params:
        type: "dict"
        description: "params to override the pod parameters"
      group_params:
        type: "map"
        elem_type: "str"
        description: "group_params to override the pod parameters"
      shared_params:
        type: "list"
        elem_type: "str"
        description: "shared_params to override the pod parameters"
      shared_group_params:
        type: "str"
        description: "shared_group_params to override the pod parameters"
  pod:
    type: "dict"
    props:
      repo:
        type: "str"
        non_empty: true
      env_repos:
        type: "list"
        elem_schema: "repo_info"
      base_dir:
        type: "str"
      data_dir:
        type: "str"
      tmp_dir:
        type: "str"
      ctx:
        type: "str"
      schema:
        type: "str"
      root:
        type: "bool"
      flat:
        type: "bool"
      fast_prepare:
        type: "bool"
      skip_unchanged:
        type: "bool"
      transfer:
        type: "list"
        elem_schema: "transfer_content"
      credentials:
        type: "map"
        elem_type: "str"
      contents:
        type: "map"
        elem_schema: "content"
      params:
        type: "dict"
      group_params:
        type: "map"
        elem_type: "str"
      shared_params:
        type: "list"
        elem_type: "str"
      shared_group_params:
        type: "str"
  run_stage_tasks:
    type: "list"
    elem_type: "simple_dict"
    elem_main_schema: "run_stage_task"
    elem_alternative_schema: "str"
  run_stage_task:
    type: "dict"
    props:
      name:
        type: "str"
        non_empty: true
      key:
        type: "str"
      node_task:
        type: "bool"
      pod_task:
        type: "bool"
      all_nodes:
        type: "bool"
      nodes:
        type: "list"
        elem_schema: "run_stage_task_node"
      params:
        type: "dict"
      group_params:
        type: "map"
        elem_type: "str"
      shared_params:
        type: "list"
        elem_type: "str"
      shared_group_params:
        type: "str"
  run_stage_task_node:
    type: "simple_dict"
    alternative_type: "str"
    props:
      name:
        type: "str"
        non_empty: true
      all_pods:
        type: "bool"
      pods:
        type: "list"
        elem_type: "str"
  task:
    type: "dict"
    props:
      type:
        type: "str"
        non_empty: true
        choices: ["task", "shell", "skip"]
      target_origin:
        type: "str"
        choices: ["env", "cloud", "pod"]
      file:
        type: "str"
      cmd:
        type: "str"
      poll:
        type: "int"
      root:
        type: "bool"
      schema:
        type: "str"
      credentials:
        type: "map"
        elem_type: "str"
      contents:
        type: "map"
        elem_schema: "content"
      params:
        type: "dict"
      group_params:
        type: "map"
        elem_type: "str"
      shared_params:
        type: "list"
        elem_type: "str"
      shared_group_params:
        type: "str"
  content:
    type: "simple_dict"
    alternative_type: "str"
    props:
      type:
        type: "str"
        choices: ["env", "str", "file", "template"]
      name:
        type: "str"
      key:
        type: "str"
      origin:
        type: "str"
        choices: ["env", "cloud", "custom"]
      file:
        type: "str"
      schema:
        type: "str"
      credentials:
        type: "map"
        elem_type: "str"
      contents:
        type: "map"
        elem_schema: "content"
      params:
        type: "dict"
      group_params:
        type: "map"
        elem_type: "str"
      shared_params:
        type: "list"
        elem_type: "str"
      shared_group_params:
        type: "str"
  repo:
    type: "dict"
    description: "repository schema"
    props:
      src:
        type: "str"
        non_empty: true
        description: "repository source"
      version:
        type: "str"
        description: "repository version"
      ssh_file:
        type: "str"
        description: "repository ssh file (used for authentication)"
  shared_group_params:
    type: "map"
    elem_type: "str"
