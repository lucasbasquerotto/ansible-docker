- name: Play 01 - Create droplets and define hosts
  hosts: main
  tags:
    - setup
  vars_files: 
    - /home/main/env/env.yml
  vars:
    main: "{{ env }}"
    main_host_vars: 
      db:
        host_user: "{{ main.host_user }}"
        host_pass: "{{ main.host_pass }}"
        host_ssh_public_keys: "{{ main.host_ssh_public_keys }}"
        mysql_password: "{{ main.mysql_password }}"
      web:
        host_user: "{{ main.host_user }}"
        host_pass: "{{ main.host_pass }}"
        host_ssh_public_keys: "{{ main.host_ssh_public_keys }}"
    main_aux:  
      db_user_data: "{{ lookup('template', 'templates/user_data.db.j2.sh', template_vars=dict(main_host_vars.db)) | trim }}"
      web_user_data: "{{ lookup('template', 'templates/user_data.web.j2.sh', template_vars=dict(main_host_vars.web)) | trim }}"
    main_droplet_list:
      - group: "db_master"
        main_data: "{{ main.db_master }}"
        user_data: "{{ main_aux.db_user_data }}"
      - group: "db_replica"
        main_data: "{{ main.db_replica }}"
        user_data: "{{ main_aux.db_user_data }}" 
      - group: "web"
        main_data: "{{ main.web }}"
        user_data: "{{ main_aux.web_user_data }}" 

  gather_facts: no  
  tasks:  
  - name: Gathering facts
    setup: 

  - include_role: 
      name: droplets
    vars:
      droplets_hosts_group: "{{ outer_item.group }}"
      droplets_hosts_file: "{{ main.hosts_file }}"
      droplets_api_token: "{{ main.api_token }}"
      droplets_host_user: "{{ main.host_user }}"
      droplets_host_pass: "{{ main.host_pass }}"
      droplets_user_data: "{{ outer_item.user_data }}"
      droplets_info: "{{ outer_item.main_data.info }}"
      droplets_tags: "{{ outer_item.main_data.tags }}"
      droplets_list: "{{ outer_item.main_data.droplets }}"
    with_items:
    - "{{ main_droplet_list }}"
    loop_control:
      loop_var: outer_item
      label: "{{ outer_item.group }}"

###############################################################################

- name: Play 02 - Wait for hosts to be ready
  hosts: host
  tags:
    - setup
  vars_files: 
    - /home/main/env/env.yml
  vars:
    main: "{{ env }}"
  gather_facts: no
  roles:
  - role: host_test
    vars:
      host_test_log_file: "{{ main.log_file }}"
      host_test_setup_last_line: "{{ main.setup_last_line }}"
      host_test_initial_connection_timeout: "{{ main.initial_connection_timeout }}"
      host_test_setup_finished_timeout: "{{ main.setup_finished_timeout }}"

###############################################################################

- name: Play 03 - Prepare and update the docker compose repository
  hosts: web
  tags:
    - prepare
  vars_files: 
    - /home/main/env/env.yml
  vars:
    main: "{{ env }}"
  gather_facts: no
  pre_tasks:
  - name: Gathering facts
    setup:  
  roles:
  - role: docker_compose
    vars:
      docker_compose_bin_src: "{{ main.docker_compose_bin_src }}"
      docker_compose_version: "{{ main.docker_compose_version }}"
      docker_compose_repo: "{{ main.docker_compose_repo }}"
      docker_compose_repo_version: "{{ main.docker_compose_repo_version }}"
      docker_compose_repo_dest: "{{ main.docker_compose_repo_dest }}"

###############################################################################

- name: Play 04 - Build and run the docker images and containers with docker-compose
  hosts: web
  tags:
    - run
  vars_files: 
    - /home/main/env/env.yml
  vars:
    main: "{{ env }}"
  gather_facts: no
  tasks:
  - name: Gathering facts
    setup: 
      
  - name: build with docker-compose
    become: true
    shell: docker-compose build
    args:
      chdir: "{{ main.docker_compose_repo_dest }}"
  
  - name: run with docker-compose
    become: true
    shell: docker-compose up -d --remove-orphans
    args:
      chdir: "{{ main.docker_compose_repo_dest }}"

###############################################################################
- name: Play 05 - Backup the mysql database
  hosts: db_master
  tags:
    - never
    - backup
  gather_facts: no
  tasks:
  - name: Gathering facts
    setup: 
    
  - name: Dump all databases to hostname.sql
    mysql_db:
      state: dump
      name: all
      target: /tmp/{{ inventory_hostname }}.sql
