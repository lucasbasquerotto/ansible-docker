- name: Play 01 - Create droplets and define hosts
  hosts: main
  tags:
  - setup
  vars_files: 
  - /home/main/env/env.yml
  vars:
    main: "{{ env }}"
    main_host_vars: 
      db:
        host_user: "{{ main.host_user }}"
        host_pass: "{{ main.host_pass }}"
        host_ssh_public_keys: "{{ main.host_ssh_public_keys }}"
        mysql_password: "{{ main.mysql_password }}"
      web:
        host_user: "{{ main.host_user }}"
        host_pass: "{{ main.host_pass }}"
        host_ssh_public_keys: "{{ main.host_ssh_public_keys }}"
    main_aux:  
      db_user_data: "{{ lookup('template', 'templates/user_data.db.j2.sh', template_vars=dict(main_host_vars.db)) | trim }}"
      web_user_data: "{{ lookup('template', 'templates/user_data.web.j2.sh', template_vars=dict(main_host_vars.web)) | trim }}"
    main_droplet_list:
      - group: "db_master"
        main_data: "{{ main.db_master }}"
        user_data: "{{ main_aux.db_user_data }}"
      - group: "db_replica"
        main_data: "{{ main.db_replica }}"
        user_data: "{{ main_aux.db_user_data }}" 
      - group: "web"
        main_data: "{{ main.web }}"
        user_data: "{{ main_aux.web_user_data }}" 

  gather_facts: no  
  tasks:  
  - name: Gathering facts
    setup: 

  - include_role: 
      name: droplets
    vars:
      droplets_hosts_group: "{{ outer_item.group }}"
      droplets_hosts_file: "{{ main.hosts_file }}"
      droplets_api_token: "{{ main.api_token }}"
      droplets_host_user: "{{ main.host_user }}"
      droplets_host_pass: "{{ main.host_pass }}"
      droplets_user_data: "{{ outer_item.user_data }}"
      droplets_info: "{{ outer_item.main_data.info }}"
      droplets_tags: "{{ outer_item.main_data.tags }}"
      droplets_list: "{{ outer_item.main_data.droplets }}"
    with_items:
    - "{{ main_droplet_list }}"
    loop_control:
      loop_var: outer_item
      label: "{{ outer_item.group }}"

###############################################################################

- name: Play 02 - Wait for hosts to be ready
  hosts: host
  tags:
  - setup
  vars_files: 
  - /home/main/env/env.yml
  vars:
    main: "{{ env }}"
  gather_facts: no
  roles:
  - role: host_test
    vars:
      host_test_log_file: "{{ main.log_file }}"
      host_test_setup_last_line: "{{ main.setup_last_line }}"
      host_test_initial_connection_timeout: "{{ main.initial_connection_timeout }}"
      host_test_setup_finished_timeout: "{{ main.setup_finished_timeout }}"

###############################################################################

- name: Play 03.1 - Prepare the docker compose repository locally
  hosts: main
  tags:
  - prepare
  - prepare-local
  vars_files: 
  - /home/main/env/env.yml
  vars:
    main: "{{ env }}"
  gather_facts: no
  tasks:
  - name: Gathering facts
    setup:  

  - name: create the directory "{{ main.web_local_repo }}"
    file:
      path: "{{ main.web_local_repo }}"
      state: directory
      mode: 0755
    
  - name: sync the folder to clone locally
    synchronize: 
      src: "files/web/" 
      dest: "{{ main.web_local_repo }}"
      recursive: yes    
      delete: yes
      checksum: yes
      times: no
      rsync_opts:
        - "--chmod=F644"
    
  - name: set db master hosts vars
    set_fact: 
      db_master_host: "{{ hostvars[groups['db_master'][0]] }}"
    
  - name: sync the folder to clone locally
    template: 
      src: "{{ item.src }}" 
      dest: "{{ main.web_local_repo }}/{{ item.dest_suffix }}"
      mode: 0600  
    vars:
      db_host: "{{ db_master_host.ansible_host }}"
      db_port: "{{ main.db_port }}"
      wp_db_user: "{{ main.wp_db_user }}"
      wp_db_pass: "{{ main.wp_db_pass }}"
    loop: "{{ main.repo_templates }}"

###############################################################################

- name: Play 03.2 - Prepare the database master
  hosts: db_master
  tags:
  - prepare
  - prepare-db-master
  vars_files: 
  - /home/main/env/env.yml
  vars:
    main: "{{ env }}"
  gather_facts: no
  tasks:
  - name: Gathering facts
    setup: 

  - name: Install dependencies
    become: true
    apt:
      name:
      - python3
      - python3-pip
      - python3-setuptools
      - python
      - python-pip
      - python-setuptools
      state: latest
      update_cache: True

  - name: Install the MySQL-python through pip
    become: true
    pip:
      name: "{{ item.name }}"
      version: "{{ item.version }}"
      state: present
    with_items:
    - { name: "PyMySQL", version: "0.9.3" }

  - name: Update the configuration
    become: true
    copy:
      src: files/db/mysqld.cnf
      dest: /etc/mysql/mysql.conf.d/mysqld.cnf
      owner: root
      group: root
      mode: u=rw,g=r,o=r
    register: mysql_setup
      
  - name: Restart MySQL
    become: true
    service:
      name: mysql
      state: restarted
    when: mysql_setup.changed

  - name: Create a new database with name '{{ main.wp_db_name }}'
    mysql_db:
      name: "{{ main.wp_db_name }}"
      state: present
      login_user: root
      login_password: "{{ main.mysql_password }}"
    
  - name: set db master hosts vars
    set_fact: 
      db_user_priv: "{{ main.wp_db_name }}.*:ALL"
  
  - debug:
      msg: "db_user_priv={{ db_user_priv }}"

  - name: Alter root user
    mysql_user:
      name: root
      password: "{{ main.mysql_password }}"
      host: "%"
      # PR #40092
      priv: "*.*:ALL,GRANT" 
      # Issue #27179
      #plugin: "mysql_native_password" 
      state: present
      login_user: root
      login_password: "{{ main.mysql_password }}"

  - name: Create user with name '{{ main.wp_db_user }}' with all privileges on database '{{ main.wp_db_name }}'
    mysql_user:
      name: "{{ main.wp_db_user }}"
      password: "{{ main.wp_db_pass }}"
      host: "%"
      # PR #40092
      priv: "{{ db_user_priv }}" 
      # Issue #27179
      #plugin: "mysql_native_password" 
      state: present
      login_user: root
      login_password: "{{ main.mysql_password }}"
      
  - name: Removes all anonymous user accounts
    mysql_user:
      name: ''
      host_all: yes
      state: absent
      login_user: root
      login_password: "{{ main.mysql_password }}"

###############################################################################

- name: Play 03.3 - Prepare and update the docker compose repository
  hosts: web
  tags:
  - prepare
  - prepare-web
  vars_files: 
  - /home/main/env/env.yml
  vars:
    main: "{{ env }}"
  gather_facts: no
  tasks:
  - name: Gathering facts
    setup:  

  - name: move the docker compose executable file
    become: true
    template:
      src: "{{ main.docker_compose_bin_src }}"
      dest: "/usr/local/bin/docker-compose"
      mode: 0700

  - name: create the directory "{{ main.docker_compose_repo_dest }}"
    become: true
    file:
      path: "{{ main.docker_compose_repo_dest }}"
      state: directory
      mode: 0755

  - name: update the repository with the docker_compose file
    become: true
    include_role:
      name: sync_dir
    vars:
      sync_dir_host_user: "{{ main.host_user }}"
      sync_dir_src: "{{ main.web_local_repo }}"
      sync_dir_dest: "{{ main.docker_compose_repo_dest }}"

  - name: Ensure directories are 0755
    become: true
    command: find {{ main.docker_compose_repo_dest }} -type d -exec chmod -c 0755 {} \;
    register: chmod_result
    changed_when: 'chmod_result.stdout != ""'

  - name: Ensure files are 0600
    become: true
    command: find {{ main.docker_compose_repo_dest }} -type f -exec chmod -c 0600 {} \;
    register: chmod_result
    changed_when: 'chmod_result.stdout != ""'

###############################################################################

- name: Play 04 - Build and run the docker images and containers with docker-compose
  hosts: web
  tags:
  - run
  vars_files: 
  - /home/main/env/env.yml
  vars:
    main: "{{ env }}"
  gather_facts: no
  tasks:
  - name: Gathering facts
    setup: 
      
  - name: build with docker-compose
    become: true
    shell: docker-compose build
    args:
      chdir: "{{ main.docker_compose_repo_dest }}"
  
  - name: run with docker-compose
    become: true
    shell: docker-compose up -d --remove-orphans
    args:
      chdir: "{{ main.docker_compose_repo_dest }}"

###############################################################################

- name: Play 05 - Backup the MySQL database
  hosts: db_master
  tags:
  - never
  - backup
  vars_files: 
  - /home/main/env/env.yml
  vars:
    main: "{{ env }}"
  gather_facts: no
  tasks:
  - name: Gathering facts
    setup: 

  - name: Create the backup directory
    file:
      path: /tmp/backup
      state: directory
      mode: 0755
    
  - name: Dump the '{{ main.wp_db_name }}' database
    mysql_db:
      state: dump
      name: "{{ main.wp_db_name }}"
      target: /tmp/backup/dump.sql
      
  - name: Compress .sql file in bz2 format
    archive:
      path: /tmp/backup/dump.sql
      dest: /tmp/backup/dump.sql.bz2
      format: bz2

###############################################################################

- name: Play 06 - Restore the MySQL database
  hosts: db_master
  tags:
  - never
  - restore
  gather_facts: no
  tasks:
  - name: Gathering facts
    setup: 

  - name: Create the restore directory
    file:
      path: /tmp/restore
      state: directory
      mode: 0755
    
  - name: Copy database dump file
    copy:
      src: dump.sql.bz2
      dest: /tmp/restore
      
  - name: Restore database
    mysql_db:
      name: wordpress
      state: import
      target: /tmp/restore/dump.sql.bz2

###############################################################################
