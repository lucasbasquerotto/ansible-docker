- debug:
    var: cloud_dns_data_list

- name: "{{ cloud_dns_title }} - godaddy dns"
  set_fact:
    cloud_dns_inner_title: "{{ cloud_dns_title }} - godaddy dns"
    cloud_dns_godaddy_api_server_url: >-
      {{ cloud_dns_credentials.api_server }}/{{ ''
      }}v{{ cloud_dns_credentials.api_version }}/domains{{ ''
      }}/{{ cloud_dns_zone }}/records{{ ''
      }}/{{ cloud_dns_record_type }}{{ ''
      }}/{{ cloud_dns_record }}
    cloud_dns_godaddy_authorization: >-
      sso-key {{ cloud_dns_credentials.api_key }}:{{ cloud_dns_credentials.api_secret }}
    cloud_dns_final_state: "{{ cloud_dns_state }}"
    cloud_dns_godaddy_records: []
    cloud_dns_godaddy_execute: true

- name: "{{ cloud_dns_title }} - validate required params"
  fail:
    msg: "{{ cloud_dns_title }} - {{ cloud_dns_godaddy_item.name }} not specified"
  loop:
  - { name: "dns_zone", value: "{{ cloud_dns_zone }}" }
  - { name: "dns_record_type", value: "{{ cloud_dns_record_type }}" }
  - { name: "dns_record_name", value: "{{ cloud_dns_record }}" }
  loop_control:
    loop_var: cloud_dns_godaddy_item
    label: "{{ cloud_dns_godaddy_item.name }}"
  when: (cloud_dns_godaddy_item.value | default('')) == ''

- name: "{{ cloud_dns_title }} - validate state"
  fail:
    msg: "{{ cloud_dns_title }} - dns state should be either 'present' or 'absent'"
  when: cloud_dns_state not in ['present', 'absent']

- name: "{{ cloud_dns_inner_title }} - define final state"
  set_fact:
    cloud_dns_final_state: "absent"
  when: >-
    ( cloud_dns_state == 'present') and 
    ((cloud_dns_data_list | default([]) | length) == 0)

- name: >-
    {{ cloud_dns_inner_title }} - verify if the record is there
    ({{ cloud_dns_godaddy_api_server_url }})
  uri:
    url: "{{ cloud_dns_godaddy_api_server_url }}"
    method: "GET"
    body_format: "json"
    headers:
      Authorization: "{{ cloud_dns_godaddy_authorization }}"
      Accept: "application/json"
  register: "cloud_dns_godaddy_result"

- name: "{{ cloud_dns_inner_title }} - get old record"
  set_fact:
    cloud_dns_godaddy_old_records: "{{ cloud_dns_godaddy_result.json | default([]) }}"

- block:

  - name: "{{ cloud_dns_title }} - define the records"
    include_tasks: "godaddy.record.dns.yml"
    loop: "{{ cloud_dns_data_list | default([]) | flatten(levels=1) }}"
    loop_control:
      loop_var: cloud_dns_item
      index_var: cloud_dns_index
      label: "{{ cloud_dns_index }}"
    when: cloud_dns_item.value != ''
    
  - include_role: 
      name: "diff"
    vars: 
      diff_list_1: "{{ cloud_dns_godaddy_old_records }}"
      diff_list_2: "{{ cloud_dns_godaddy_records }}"
  
  - name: "{{ cloud_dns_inner_title }} - get old record"
    set_fact:
      cloud_dns_godaddy_execute: false
    when: (diff_list_result | default([]) | length) == 0

  - name: "{{ cloud_dns_inner_title }} - print body"
    debug:
      var: cloud_dns_godaddy_records
      verbosity:  3

  when: cloud_dns_final_state == 'present'

- name: "{{ cloud_dns_inner_title }} - verify if api should be called to delete the record"
  set_fact:
    cloud_dns_godaddy_execute: false
  when: >-
    (cloud_dns_final_state == 'absent')
    and
    ((cloud_dns_godaddy_old_records | length) == 0)

- name: >-
    {{ cloud_dns_inner_title }} - call godaddy api to
    {{ (cloud_dns_final_state == 'present') 
    | ternary('create/update the record', 'delete the record') }}
    ({{ cloud_dns_godaddy_api_server_url }})
  uri:
    url: "{{ cloud_dns_godaddy_api_server_url }}"
    method: "PUT"
    body: "{{ cloud_dns_godaddy_records | to_nice_json }}"
    body_format: "json"
    headers:
      Authorization: "{{ cloud_dns_godaddy_authorization }}"
      Accept: "application/json"
  changed_when: cloud_dns_godaddy_execute | bool
  when: cloud_dns_godaddy_execute | bool

