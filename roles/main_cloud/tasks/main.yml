- name: "{{ main_cloud_title }} - set_fact - main"
  set_fact: 
    main_cloud_role: "{{ main_cloud_var.type }}"
    main_cloud_aux:
      ssh_encrypted_key_path: >-
        {{ 
        main_cloud_var.ssh_encrypted_key_path_rel | default('') | 
        ternary(env_dir + '/' + 
        (main_cloud_var.ssh_encrypted_key_path_rel | default('')), '') 
        }}
      ssh_key_path: >-
        {{ 
        main_cloud_var.ssh_encrypted_key_path_rel | 
        ternary(main_cloud_tmp_dir + '/' + main_cloud_node_id + '.key', '')
        }}
  tags: ["no_print"]

- name: "{{ main_cloud_title }} - set_fact - inner vars"
  set_fact: 
    main_cloud_inner_vars:
      instance_type: "{{ main_cloud_node_id }}"
      region: "{{ main_cloud_var.region }}"
      title: "{{ main_cloud_node_id }}"
      hosts_file: "{{ main_cloud_hosts_file }}"
      ssh_encrypted_key_path: "{{ main_cloud_aux.ssh_encrypted_key_path }}"
      ssh_key_path: "{{ main_cloud_aux.ssh_key_path }}"
      api_token: "{{ main_cloud_var.api_token }}"
      host_user: "{{ main_cloud_var.host_user }}"
      host_pass: "{{ main_cloud_var.host_pass }}"
      ssh_public_keys: "{{ main_cloud_var.host_ssh_public_keys }}"
      all_tags: "{{ main_cloud_var.tags }}"
      all_firewalls: "{{ main_cloud_var.firewalls }}"
      tags: "{{ main_cloud_node.tags }}"
      instance_count: "{{ main_cloud_node.amount }}"
      instance_max: "{{ main_cloud_node.amount_to_check }}"
      instance_name: >-
        {{ 
        main_cloud_env_name 
        }}-{{ 
        main_cloud_orchestration.type 
        }}-{{ 
        main_cloud_node_id 
        }}
      instance_tmp: "{{ main_cloud_node.tmp | default(false) }}"
      ipv6: "{{ main_cloud_var.ipv6 }}"
      user_data_file: "{{ main_cloud_user_data_file | default('') }}"
      shutdown: "{{ main_cloud_shutdown | default(false) }}"
  tags: ["no_print"]

- name: "{{ main_cloud_title }} - set_fact"
  set_fact: { "{{ main_cloud_item_key }}": "{{ main_cloud_item_value }}" }
  vars:
    main_cloud_item_key: "{{ main_cloud_role + '_' + main_cloud_item.key }}"
    main_cloud_item_value: "{{ main_cloud_item.value }}"
  loop: "{{ main_cloud_inner_vars | dict2items }}"
  loop_control:
    loop_var: main_cloud_item
    label: "{{ main_cloud_item.key }}"
  tags: ["no_print"]

- name: "{{ main_cloud_title }} - execute role {{ main_cloud_role }}"
  include_role: 
    name: '{{ main_cloud_role }}'

# main_cloud_role + '_active_hosts' has the hosts created by the role
- set_fact: 
    main_cloud_active_hosts: "{{ lookup('vars', main_cloud_role + '_active_hosts') }}"
    main_cloud_hosts_info: ""
    main_cloud_unencrypt_key: >-
      {{
      ((main_cloud_aux.ssh_encrypted_key_path | default('', true)) != '') 
      and 
      ((main_cloud_aux.ssh_key_path | default('', true)) != '')
      }}

- debug:
    var: main_cloud_aux.ssh_encrypted_key_path

- debug:
    var: main_cloud_aux.ssh_key_path

- debug:
    var: (main_cloud_unencrypt_key | bool)

- name: >-
    {{ main_cloud_title }} - create unencrypted key file dir - 
    {{ main_cloud_aux.ssh_key_path | dirname }}
  file:
    path: "{{ main_cloud_aux.ssh_key_path | dirname }}"
    state: directory
    mode: 0755
  when: (main_cloud_unencrypt_key | bool)

- name: "{{ main_cloud_title }} - generate unencrypted key file - {{ main_cloud_aux.ssh_key_path }}"
  copy:
    src: "{{ main_cloud_aux.ssh_encrypted_key_path }}"
    dest: "{{ main_cloud_aux.ssh_key_path }}"
    decrypt: yes
    mode: 0600
  when: main_cloud_unencrypt_key | bool

- name: "{{ main_cloud_title }} - generate the hosts information with the instances ips"
  set_fact: 
    main_cloud_hosts_info: >-
      {{ main_cloud_hosts_info | default('') }}

      {{ main_cloud_item.name }}
      ansible_host={{ main_cloud_item.public_ipv4 }}
      ansible_user={{ main_cloud_var.host_user }}
      {{ 
      main_cloud_var.host_pass | 
      ternary('ansible_become_pass=' + main_cloud_var.host_pass, '') 
      }}
      {{ 
      main_cloud_aux.ssh_key_path | 
      ternary('ansible_ssh_private_key_file=' + main_cloud_aux.ssh_key_path, '') 
      }}
      instance_type={{ main_cloud_node_id }}
      instance_index={{ main_cloud_index }}
      ansible_host_service={{ 
      main_cloud_node.dmz | default(false) | bool | 
      ternary(main_cloud_item.public_ipv4, main_cloud_item.private_ip) 
      }}
  loop: "{{ main_cloud_active_hosts | list }}"
  loop_control:
    index_var: main_cloud_index
    loop_var: main_cloud_item
    label: "{{ main_cloud_item.name }}"

- name: '{{ main_cloud_title }} - Update the hosts file with the generated hosts'
  blockinfile:
    path: "{{ main_cloud_hosts_file }}"
    marker: "# {mark} ANSIBLE MANAGED BLOCK - {{ main_cloud_node_id }}"
    insertafter: "\\[{{ main_cloud_node_id }}\\]"
    block: "{{ main_cloud_hosts_info }}"
  tags: ["print_action"]

- name: '{{ main_cloud_title }} - refresh inventory'
  meta: refresh_inventory
  tags: ["print_action"]

- name: "create the main dns record (IPv6) point to the instance when in the dmz layer"
  include_role: 
    name: "main_dns"
  vars: 
    main_dns_title: "{{ main_cloud_title }} - main dns - IPv6"
    main_dns_task: "{{ main_cloud_dns_dict[main_cloud_item.name].type + '_dns' }}"
    main_dns_credentials: "{{ main_cloud_dns_dict[main_cloud_item.name].credentials }}"
    main_dns_zone: "{{ main_cloud_dns_dict[main_cloud_item.name].zone }}"
    main_dns_type: "AAAA"
    main_dns_record: "{{ main_cloud_item.record }}"
    main_dns_value: "{{ main_cloud_active_hosts[0].public_ipv6 }}"
  loop: "{{ (main_cloud_node.dns | default([])) | list }}"
  loop_control:
    loop_var: main_cloud_item
    label: "{{ main_cloud_item.name }}"
  when: >-
    (main_cloud_dns_dict[main_cloud_item.name] is defined) and
    (main_cloud_dns_dict[main_cloud_item.name].task is defined) and
    (main_cloud_active_hosts | length == 1) and 
    (main_cloud_node.dmz | bool) and 
    (main_cloud_active_hosts[0].public_ipv6 is defined)
  tags: ["print_action"]

- name: "create the main dns record (IPv4) point to the instance when in the dmz layer"
  include_role: 
    name: "main_dns"
  vars: 
    main_dns_title: "{{ main_cloud_title }} - main dns - IPv4"
    main_dns_task: "{{ main_cloud_dns_dict[main_cloud_item.name].type + '_dns' }}"
    main_dns_credentials: "{{ main_cloud_dns_dict[main_cloud_item.name].credentials }}"
    main_dns_zone: "{{ main_cloud_dns_dict[main_cloud_item.name].zone }}"
    main_dns_type: "A"
    main_dns_record: "{{ main_cloud_item.record }}"
    main_dns_value: "{{ main_cloud_active_hosts[0].public_ipv4 }}"
  loop: "{{ (main_cloud_node.dns | default([])) | list }}"
  loop_control:
    loop_var: main_cloud_item
    label: "{{ main_cloud_item.name }}"
  when: >-
    (main_cloud_dns_dict[main_cloud_item.name] is defined) and
    (main_cloud_dns_dict[main_cloud_item.name].task is defined) and
    (main_cloud_active_hosts | length == 1) and 
    (main_cloud_node.dmz | bool) and 
    (main_cloud_active_hosts[0].public_ipv4 is defined)
  tags: ["print_action"]
    