### Cloud Node Params ###

- name: "{{ cloud_node_title }} - ensure the inventory contains {{ '[' + cloud_node_node_id + ']' }}"
  lineinfile:
    name: "{{ cloud_node_hosts_file }}"
    line: "{{ '[' + cloud_node_node_id + ']' }}"
    state: present
  check_mode: yes
  register: cloud_node_conf
  failed_when: (cloud_node_conf is changed) or (cloud_node_conf is failed)

- include_role:
    name: "params_mixer"
  vars:
    params_mixer_main_params: "{{ cloud_node_node.params | default({}) }}"
    params_mixer_other_params_names: "{{ cloud_node_node.other_params | default({}) }}"
    params_mixer_shared_params_name: "{{ cloud_node_node.shared_params | default('') }}"
    params_mixer_shared_params_names_dict: "{{ cloud_node_node_shared_params_dict | default({}) }}"
    params_mixer_params_dict: "{{ cloud_node_node_params_dict | default({}) }}"
  tags: ["no_print"]

- set_fact:
    cloud_node_params: "{{ params_mixer_params }}"
  tags: ["no_print"]

- set_fact:
    cloud_node_params_instance: >-
      {{ cloud_node_params.cloud_instance_dict[cloud_node_cloud.type][cloud_node_params.instance] }}
    cloud_node_params_region: >-
      {{ cloud_node_params.cloud_region_dict[cloud_node_cloud.type][cloud_node_params.region] }}
    cloud_node_params_size: >-
      {{ cloud_node_params.cloud_size_dict[cloud_node_cloud.type][cloud_node_params.size] }}
  tags: ["no_print"]

### Cloud Node Other Vars ###

- set_fact: 
    cloud_node_host_ssh_public_keys_path: >-
      {{ 
      ((cloud_node_node_credentials.host_ssh_public_keys_path | default('')) != '' )
      | ternary(
      cloud_node_env_dir + '/' + cloud_node_node_credentials.host_ssh_public_keys_path,
      ''
      )
      }}
  tags: ["no_print"]

- set_fact: 
    cloud_node_host_ssh_public_keys: >-
      {{ 
      ((cloud_node_host_ssh_public_keys_path | default('')) != '' )
      | ternary(
      lookup('file', cloud_node_host_ssh_public_keys_path).splitlines() | list ,
      []
      )
      }}
    cloud_node_ssh_key_filename: "{{ cloud_node_node_id + '.key' }}"
  tags: ["no_print"]

- set_fact: 
    cloud_node_host_vars: 
      host_user: "{{ cloud_node_node_credentials.host_user }}"
      host_pass: "{{ cloud_node_node_credentials.host_pass }}"
      host_ssh_public_keys: "{{ cloud_node_host_ssh_public_keys }}"
    cloud_node_user_data_file: >-
      {{ 
      ((cloud_node_params_instance.user_data_file | default('')) != '' )
      | ternary(
      cloud_node_env_dir + '/' + cloud_node_params_instance.user_data_file,
      ''
      )
      }}
    cloud_node_aux:
      ssh_encrypted_key_path: >-
        {{ 
        cloud_node_node_credentials.ssh_encrypted_key_path_rel | default('') | 
        ternary(env_dir + '/' + 
        (cloud_node_node_credentials.ssh_encrypted_key_path_rel | default('')), '') 
        }}
      ssh_key_path: >-
        {{ 
        cloud_node_node_credentials.ssh_encrypted_key_path_rel | 
        ternary(cloud_node_tmp_dir + '/' + cloud_node_ssh_key_filename, '')
        }}
  tags: ["no_print"]

- set_fact:
    cloud_node_cloud_instances: []
    cloud_node_instance_count: "{{ cloud_node_node.amount }}"
    cloud_node_instance_max: "{{ cloud_node_node.max_amount | default(cloud_node_node.amount) }}"
  tags: ["no_print"]

- set_fact:
    cloud_node_cloud_instances: >-
      {{ cloud_node_cloud_instances +
      [{ 'name':
      cloud_node_env_name + '-' +
      cloud_node_node_id + '-' +
      cloud_node_params_region.name + '-' +
      ('%04d' | format(cloud_node_item)),
      'region_id': cloud_node_params_region.name,
      'create':
      (((cloud_node_item | int) <= (cloud_node_instance_count | int))
      and not (cloud_node_shutdown | default(false) | bool)) | 
      ternary('true', 'false') }] }}
  loop: "{{ range(1, (cloud_node_instance_max | int) + 1) | list }}"
  loop_control:
    loop_var: cloud_node_item
  tags: ["no_print"]

- set_fact:
    cloud_node_user_data: >-
      {{ lookup(
      'template', 
      cloud_node_user_data_file, 
      template_vars=dict(cloud_node_host_vars)
      ) | trim 
      }}
  when: cloud_node_user_data_file != '' 
  tags: ["no_print"]

# Will be populeted from the inner task
- set_fact: 
    cloud_node_active_hosts: []
  tags: ["no_print"]

- name: "{{ cloud_node_title }} - create the nodes"
  include_tasks: "ext/{{ cloud_node_cloud.type }}.node.yml"
  vars:
    cloud_node_inner_title: "{{ cloud_node_title }} - {{ cloud_node_cloud.type }}"
    cloud_node_inner_hosts_file: "{{ cloud_node_hosts_file }}"
    cloud_node_inner_instance_type: "{{ cloud_node_node_id }}"
    cloud_node_inner_api_token: "{{ cloud_node_cloud_credentials.api_token }}"
    cloud_node_inner_host_user: "{{ cloud_node_node_credentials.host_user }}"
    cloud_node_inner_host_pass: "{{ cloud_node_node_credentials.host_pass }}"
    cloud_node_inner_user_data: "{{ cloud_node_user_data | default('') }}"
    cloud_node_inner_size_id: "{{ cloud_node_params_size.name }}"
    cloud_node_inner_image_id: "{{ cloud_node_params_instance.image }}"
    cloud_node_inner_ipv6: "{{ cloud_node_params_instance.ipv6 }}"
    cloud_node_inner_wait_timeout: "{{ cloud_node_wait_timeout | default(500) }}"
    cloud_node_inner_create: "{{ cloud_node_item.create }}"
    cloud_node_inner_params: "{{ cloud_node_params }}"
  loop: "{{ cloud_node_cloud_instances | list }}"
  loop_control:
    loop_var: cloud_node_item
    label: "{{ cloud_node_item.name }}"
  when: cloud_node_cloud.type != 'local'

- set_fact: 
    cloud_node_hosts_info: ""
    cloud_node_unencrypt_key: >-
      {{
      ((cloud_node_aux.ssh_encrypted_key_path | default('', true)) != '') 
      and 
      ((cloud_node_aux.ssh_key_path | default('', true)) != '')
      }}
  tags: ["no_print"]

- name: >-
    {{ cloud_node_title }} - create unencrypted key file dir - 
    {{ cloud_node_aux.ssh_key_path | dirname }}
  file:
    path: "{{ cloud_node_aux.ssh_key_path | dirname }}"
    state: directory
    mode: 0755
  when: (cloud_node_unencrypt_key | bool)

- name: "{{ cloud_node_title }} - generate unencrypted key file - {{ cloud_node_aux.ssh_key_path }}"
  copy:
    src: "{{ cloud_node_aux.ssh_encrypted_key_path }}"
    dest: "{{ cloud_node_aux.ssh_key_path }}"
    decrypt: yes
    mode: 0600
  when: cloud_node_unencrypt_key | bool

- set_fact: 
    cloud_node_hosts_info: >-
      {{ cloud_node_hosts_info | default('') }}

      {{ cloud_node_item.name }}
      ansible_host={{ cloud_node_item.public_ipv4 }}
      ansible_user={{ cloud_node_node_credentials.host_user }}
      {{ 
      cloud_node_node_credentials.host_pass | 
      ternary('ansible_become_pass=' + cloud_node_node_credentials.host_pass, '') 
      }}
      {{ 
      cloud_node_aux.ssh_key_path | 
      ternary('ansible_ssh_private_key_file=' + cloud_node_aux.ssh_key_path, '') 
      }}
      instance_type={{ cloud_node_node_id }}
      instance_index={{ cloud_node_index + 1 }}
      ansible_host_public_ipv4={{ cloud_node_item.public_ipv4 | default('') }}
      ansible_host_public_ipv6={{ cloud_node_item.public_ipv6 | default('') }}
      ansible_host_private_ip={{ cloud_node_item.private_ip | default('') }}
  loop: "{{ cloud_node_active_hosts | list }}"
  loop_control:
    index_var: cloud_node_index
    loop_var: cloud_node_item
    label: "{{ cloud_node_item.name }}"
  tags: ["no_print"]

- name: "{{ cloud_node_title }} - update the hosts file with the generated hosts"
  blockinfile:
    path: "{{ cloud_node_hosts_file }}"
    marker: "# {mark} ANSIBLE MANAGED BLOCK - {{ cloud_node_node_id }}"
    insertafter: "\\[{{ cloud_node_node_id }}\\]"
    block: "{{ cloud_node_hosts_info }}"
  tags: ["print_action"]

- name: '{{ cloud_node_title }} - refresh inventory'
  meta: refresh_inventory
  tags: ["print_action"]

- set_fact:
    cloud_node_ips:
    - name: "ipv4"
      record_type: "A"
    - name: "ipv6"
      record_type: "AAAA"
  tags: ["no_print"]
  
- set_fact:
    cloud_node_ips: "{{ cloud_node_ips + [cloud_node_item] }}"
  loop: 
  - name: "ipv4"
    record_type: "A"
    dns_value: "{{ cloud_node_active_hosts[0].public_ipv4 | default('') }}"
  - name: "ipv6"
    record_type: "AAAA"
    dns_value: "{{ cloud_node_active_hosts[0].public_ipv6 | default('') }}"
  loop_control:
    loop_var: cloud_node_item
  when: >-
    (not (cloud_node_shutdown | default(false) | bool)) and 
    (cloud_node_active_hosts | default([]) | length == 1) and 
    (cloud_node_item.dns_value != '')
  tags: ["no_print"]

- debug:
    var: cloud_node_active_hosts

- debug:
    var: cloud_node_ips
    
- name: >-
    {{ cloud_node_title }} - create or destroy the main dns records
    that points to the instance
  include_role: 
    name: "cloud_dns"
  vars: 
    cloud_node_item_dns: "{{ cloud_node_params.dns_dict[cloud_node_item.0] }}"
    cloud_dns_title: "{{ cloud_node_title }} - main dns - {{ cloud_node_item.1.name }}"
    cloud_dns_type: "{{ cloud_node_dns_dict[cloud_node_item_dns.name].type }}"
    cloud_dns_credential_name: "{{ cloud_node_dns_dict[cloud_node_item_dns.name].credentials }}"
    cloud_dns_credentials: "{{ cloud_node_credentials_dict[cloud_dns_credential_name] }}"
    cloud_dns_zone: "{{ cloud_node_dns_dict[cloud_node_item_dns.name].zone }}"
    cloud_dns_record_type: "{{ cloud_node_item.1.record_type }}"
    cloud_dns_record: "{{ cloud_node_item_dns.record }}"
    cloud_dns_value: "{{ cloud_node_item.1.dns_value | default('') }}"
    cloud_dns_state: "{{ ((cloud_dns_value | default('')) != '') | ternary('present', 'absent') }}"
  loop: "{{ (cloud_node_params.dns | default([])) | list | product(cloud_node_ips) | list }}"
  loop_control:
    loop_var: cloud_node_item
    label: >-
      {{ cloud_node_item.0 }} ({{ cloud_node_item_dns.name }}) - 
      {{ cloud_node_item.1.name }} ({{ cloud_dns_state }})"
  when: >-
    (cloud_node_dns_dict[cloud_node_item_dns.name] is defined) and
    ((cloud_node_dns_dict[cloud_node_item_dns.name].type | default('')) != '') and 
    (
    ((cloud_dns_value | default('')) != '') or
    (not (cloud_node_shutdown | default(false) | bool)) or
    (cloud_node_allow_destroy_dns | default(false) | bool)
    )
  tags: ["print_action"]
