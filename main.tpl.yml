###############################################################################
##################            PREPARE THE CLOUD            ####################
###############################################################################

- name: Play 0 - Main - Load Environment
  hosts: main
  tags:
  - always
  gather_facts: no  
  tasks:
  - include_tasks: "tasks/init.yml"
    tags: ["no_print"]

###############################################################################
##################            PREPARE THE CLOUD            ####################
###############################################################################

- name: Play 01.01 - Cloud - Main 
  hosts: main
  tags:
  - init
  - cloud
  - cloud_main
  gather_facts: no  
  tasks:
  - include_tasks: "tasks/init.yml"
    when: ansible_connection != 'local'
    tags: ["no_print"]

  - include_tasks: "{{ env_hooks.before_cloud_main }}"
    when: (env_hooks.before_cloud_main | default('')) != ''
      
  - include_role: 
      name: "cloud_main"
    vars: 
      cloud_main_title: "{{ env_title }} - [prepare] cloud[{{ main_item }}]"
      cloud_main_env_name: "{{ env.name }}"
      cloud_main_cloud: "{{ env.clouds[main_item] }}"
      cloud_main_credentials: >-
        {{ env.credentials[cloud_main_cloud.credentials] }}
      cloud_main_cloud_params_dict: "{{ env.cloud_params | default({}) }}"
      cloud_main_cloud_shared_params_dict: "{{ env.cloud_shared_params | default({}) }}"
      cloud_main_cloud_shared_group_params_dict: "{{ env.cloud_shared_group_params | default({}) }}"
      cloud_main_tmp_dir: "{{ env_tmp_dir }}/cloud/main/{{ main_item }}"
      cloud_main_state: "present"
    loop: "{{ env.main[env.ctx].clouds | default([]) | list }}"
    loop_control:
      loop_var: main_item

  - include_tasks: "{{ env_hooks.after_cloud_main }}"
    when: (env_hooks.after_cloud_main | default('')) != ''

###############################################################################

- name: Play 01.01 - Cloud - DNS
  hosts: main
  tags:
  - init
  - cloud
  - dns
  gather_facts: no  
  tasks:  
  - include_tasks: "tasks/init.yml"
    when: ansible_connection != 'local'
    tags: ["no_print"]

  - include_tasks: "{{ env_hooks.before_dns }}"
    when: (env_hooks.before_dns | default('')) != ''

  - include_role: 
      name: "cloud_dns"
    vars: 
      main_dns: "{{ env.dns[main_item.name] }}"
      cloud_dns_title: >-
        {{ env_title }} - create the static dns records - 
        dns[{{ main_dns.type }}] - {{ main_item.record }}
      cloud_dns_type: "{{ main_dns.type }}"
      cloud_dns_credentials: >-
        {{ env.credentials[main_dns.credentials] }}
      cloud_dns_zone: "{{ main_dns.zone }}"
      cloud_dns_record_type: "{{ main_item.dns_type }}"
      cloud_dns_record: "{{ main_item.record }}"
      cloud_dns_data_list: "{{ main_item.data_list }}"
      cloud_dns_state: "present"
    loop: "{{ env.main[env.ctx].dns | default([]) | list }}"
    loop_control:
      loop_var: main_item
      label: "{{ main_item.name }}"

  - include_tasks: "{{ env_hooks.after_dns }}"
    when: (env_hooks.after_dns | default('')) != ''

###############################################################################

- name: Play 01.02 - Cloud - Buckets
  hosts: main
  tags:
  - init
  - cloud
  - buckets
  gather_facts: no  
  tasks:  
  - include_tasks: "tasks/init.yml"
    when: ansible_connection != 'local'
    tags: ["no_print"]

  - include_tasks: "{{ env_hooks.before_buckets }}"
    when: (env_hooks.before_buckets | default('')) != ''

  - name: "{{ env_title }} - create the buckets"
    aws_s3:
      s3_url: "{{ main_bucket.endpoint }}"
      access_key: "{{ main_credentials.access_key }}"
      secret_key: "{{ main_credentials.secret_key }}"
      bucket: "{{ main_bucket.name }}"
      mode: create
    vars:
      main_bucket: "{{ env.buckets[main_item] }}"
      main_credentials: "{{ env.credentials[main_bucket.credentials] }}"
    loop: "{{ (env.main[env.ctx].buckets | default([])) }}"
    loop_control:
      loop_var: main_item
      label: "{{ main_item }}"

  - include_tasks: "{{ env_hooks.after_buckets }}"
    when: (env_hooks.after_buckets | default('')) != ''

###############################################################################

- name: Play 01.04 - Cloud - Nodes
  hosts: main
  tags:
  - init
  - cloud
  - nodes
  - create
  gather_facts: no  
  tasks:
  - include_tasks: "tasks/init.yml"
    when: ansible_connection != 'local'
    tags: ["no_print"]

  - include_tasks: "{{ env_hooks.before_nodes }}"
    when: (env_hooks.before_nodes | default('')) != ''

  - include_role: 
      name: "cloud_node"
    vars: 
      cloud_node_env_name: "{{ env.name }}"
      cloud_node_node_name: "{{ main_item.name | default(main_item) }}"
      cloud_node_node_key: "{{ main_item.key | default(main_item.name) | default(main_item) }}"
      cloud_node_node: "{{ env.nodes[cloud_node_node_key] }}"
      cloud_node_title: >-
        {{ env_title }} - cloud - nodes - node[{{ cloud_node_node_name }}] - 
        cloud[{{ cloud_node_node.cloud }}]
      cloud_node_node_credentials: >-
        {{ env.credentials[cloud_node_node.credentials] }}
      cloud_node_node_params_dict: "{{ env.node_params | default({}) }}"
      cloud_node_node_shared_params_dict: "{{ env.node_shared_params | default({}) }}"
      cloud_node_node_shared_group_params_dict: "{{ env.node_shared_group_params | default({}) }}"
      cloud_node_cloud: "{{ env.clouds[cloud_node_node.cloud] }}"
      cloud_node_cloud_credentials: >-
        {{ env.credentials[cloud_node_cloud.credentials] }}
      cloud_node_credentials_dict: "{{ env.credentials }}"
      cloud_node_dns_dict: "{{ env.dns }}"
      cloud_node_env_dir: "{{ env_dir }}"
      cloud_node_tmp_dir: >-
        {{ env_tmp_dir }}/cloud/node/{{ cloud_node_node.cloud }}
      cloud_node_hosts_file: "{{ inventory_file }}"
    loop: "{{ env.main[env.ctx].nodes | default([]) | list }}"
    loop_control:
      loop_var: main_item
    when: >-
      (((env_node | default('')) == '') or (env_node == cloud_node_node_name))
      and
      (cloud_node_cloud.type != 'local')
      and 
      (not (cloud_node_node.external | default(false) | bool))

  - include_tasks: "{{ env_hooks.after_nodes }}"
    when: (env_hooks.after_nodes | default('')) != ''

###############################################################################

- name: Play 01.05 - Wait for the hosts to be ready
  hosts: host
  tags:
  - init
  - cloud
  - nodes
  - wait
  gather_facts: no
  tasks:
  - include_tasks: "tasks/env.yml"
    tags: ["no_print"]

  - include_tasks: "{{ env_hooks.before_wait_nodes }}"
    when: >-
      (((env_node | default('')) == '') or (env_node == instance_type))
      and
      ((env_hooks.before_wait_nodes | default('')) != '')
    
  - include_role: 
      name: "host_test"
    vars: 
      host_test_title: "{{ env_title }} - {{ inventory_hostname }}"
      host_test_node: "{{ env.nodes[instance_key] }}"
      host_test_node_params_dict: "{{ env.node_params | default({}) }}"
      host_test_node_shared_params_dict: "{{ env.node_shared_params | default({}) }}"
      host_test_node_shared_group_params_dict: "{{ env.node_shared_group_params | default({}) }}"
    when: (((env_node | default('')) == '') or (env_node == instance_type))

  - include_tasks: "{{ env_hooks.after_wait_nodes }}"
    when: >-
      (((env_node | default('')) == '') or (env_node == instance_type))
      and
      ((env_hooks.after_wait_nodes | default('')) != '')

###############################################################################
######################        PREPARE THE PODS         ########################
###############################################################################

- name: Play 02.01 - Prepare the Pods Repositories (Local)
  hosts: main
  tags:
  - init
  - pod
  - prepare
  - prepare-local
  gather_facts: no
  tasks:
  - include_tasks: "tasks/init.yml"
    when: ansible_connection != 'local'
    tags: ["no_print"]

  - include_tasks: "{{ env_hooks.before_local_prepare }}"
    when: (env_hooks.before_local_prepare | default('')) != ''

  - include_role: 
      name: "cloud_repos"
    vars:
      cloud_repos_title: "{{ env_title }} - cloud repositories (local)"
      cloud_repos_nodes: "{{ env.main[env.ctx].nodes | default([]) }}"
      cloud_repos_nodes_dict: "{{ env.nodes | default({}) }}"
      cloud_repos_pods_dict: "{{ env.pods | default({}) }}"
      cloud_repos_apps_dict: "{{ env.apps | default({}) }}"
      cloud_repos_repos_dict: "{{ env.repos | default({}) }}"
      cloud_repos_local_pods: "{{ env.main[env.ctx].local.pods | default([]) }}"
      cloud_repos_local_apps: "{{ env.main[env.ctx].local.apps | default([]) }}"
      cloud_repos_env_local_pod_dict: "{{ env_local_pod_dict }}"
      cloud_repos_env_local_app_dict: "{{ env_local_app_dict }}"
      cloud_repos_env_dir: "{{ env_dir }}"
      cloud_repos_env_tmp_dir: "{{ env_tmp_dir }}"

  - include_tasks: "{{ env_hooks.after_local_prepare }}"
    when: (env_hooks.after_local_prepare | default('')) != ''

###############################################################################

- name: Play 02.02 - Prepare the Pods - Remote
  hosts: main,host
  tags:
  - init
  - pod
  - prepare
  - prepare-remote
  gather_facts: no
  tasks:
  - include_tasks: "tasks/init.yml"
    when: ansible_connection != 'local'
    tags: ["no_print"]

  - include_tasks: "{{ env_hooks.before_remote_prepare }}"
    when: >-
      (((env_node | default('')) == '') or (env_node == instance_type))
      and
      ((env_hooks.before_remote_prepare | default('')) != '')

  - include_role: 
      name: "cloud_prepare"
    vars:
      cloud_prepare_env_name: "{{ env.name }}"
      cloud_prepare_ctx_name: "{{ env.ctx }}"
      cloud_prepare_env_local_repo: "{{ env_local_repo }}"
      cloud_prepare_node_name: "{{ main_item.name | default(main_item) }}"
      cloud_prepare_node_key: "{{ main_item.key | default(main_item.name) | default(main_item) }}"
      cloud_prepare_node: "{{ env.nodes[cloud_prepare_node_key] }}"
      cloud_prepare_title: "{{ env_title }} - prepare - node[{{ cloud_prepare_node_name }}]"
      cloud_prepare_base_dir: "{{ cloud_prepare_node.base_dir }}"
      cloud_prepare_node_credentials: >-
        {{ env.credentials[cloud_prepare_node.credentials] }}
      cloud_prepare_node_params_dict: "{{ env.node_params | default({}) }}"
      cloud_prepare_node_shared_params_dict: "{{ env.node_shared_params | default({}) }}"
      cloud_prepare_node_shared_group_params_dict: "{{ env.node_shared_group_params | default({}) }}"
      cloud_prepare_cloud: "{{ env.clouds[cloud_prepare_node.cloud] }}"
      cloud_prepare_pods_dict: "{{ env.pods }}"
      cloud_prepare_pod_params_dict: "{{ env.pod_params | default({}) }}"
      cloud_prepare_pod_shared_params_dict: "{{ env.pod_shared_params | default({}) }}"
      cloud_prepare_pod_shared_group_params_dict: "{{ env.pod_shared_group_params | default({}) }}"
      cloud_prepare_credentials_dict: "{{ env.credentials }}"
      cloud_prepare_repos_dict: "{{ env.repos }}"
      cloud_prepare_env_dir: "{{ env_dir }}"
      cloud_prepare_local_tmp_dir: "{{ env_tmp_dir }}/node/{{ cloud_prepare_node_name }}"
      cloud_prepare_local_pod_repo_base: "{{ env_tmp_dir }}/repo/pod"
      cloud_prepare_env_cmd: "{{ env_cmd | default('', true) }}"
      cloud_prepare_env_pod: "{{ env_pod | default('', true) }}"
      cloud_prepare_env_vars_relative_file: >-
        tmp/env/cloud.prepare.vars_full.yml
      cloud_prepare_instance_index: "{{ instance_index }}"
      cloud_prepare_local_pod_dict: "{{ env_local_pod_dict }}"
      cloud_prepare_local_app_dict: "{{ env_local_app_dict }}"
      cloud_prepare_local_data_dir_inside: >-
        {{ 
        (ansible_connection == 'local') | 
        ternary(env_local_data_dir | default(''), '') 
        }}
      cloud_prepare_meta: "{{ env.meta_params[env.main[env.ctx].meta] | default({}) }}"
      cloud_prepare_base_dir_rel: "../.."
    loop: "{{ env.main[env.ctx].nodes | default([]) | list }}"
    loop_control:
      loop_var: main_item
    when: >-
      ((ansible_connection == 'local') or (cloud_prepare_node_name == instance_type))
      and
      (((env_node | default('')) == '') or (env_node == cloud_prepare_node_name))
      and 
      (
      ((ansible_connection == 'local') and (cloud_prepare_cloud.type == 'local'))
      or
      ((ansible_connection != 'local') and (cloud_prepare_cloud.type != 'local'))
      )

  - include_tasks: "{{ env_hooks.after_remote_prepare }}"
    when: >-
      (((env_node | default('')) == '') or (env_node == instance_type))
      and
      ((env_hooks.after_remote_prepare | default('')) != '')

###############################################################################
###########        RUN - MIGRATE THE DATA & START THE PODS         ############
###############################################################################

<% set var_main_params = params.main[params.ctx] %>
<% set var_all_nodes = var_main_params.nodes | default([]) %>
<% set var_main_run_stages = var_main_params.run_stages | default([]) %>
<% set var_run_stage_tasks_dict = params.run_stage_tasks | default({}) %>
<% set var_run_stage_node_pods_dict = params.run_stage_node_pods | default({}) %>
<% set var_tasks_group_dict = params.tasks_groups | default({}) %>
<% set var_task_dict = params.tasks | default({}) %>
<% set var_local_base_dir_pod = local_params.base_dir_pod | default({}) %>
<% set var_local_pod_dir_dict = env_params.local_pod_dir | default({}) %>
<% set var_main_all_nodes = var_main_params.nodes | default([]) %>

<% set ns_outer_run = namespace(first=true, node_map={}, all_node_names=[]) %>

<% for var_node_item in var_main_all_nodes %>
  <% set var_node_name = var_node_item.name | default(var_node_item) %>
  <% set ns_outer_run.node_map = ns_outer_run.node_map | combine({ 
    var_node_name: var_node_item 
  }) %>
  <% set ns_outer_run.all_node_names = ns_outer_run.all_node_names + [var_node_name] %>
<% endfor %>

<% for var_run_stage_item in var_main_run_stages %>
    <% if var_run_stage_item.tasks is defined %>
      <% set var_direct = true | bool %>
      <% set var_run_stage_name = loop.index | string %>
      <% set var_run_stages = var_run_stage_item.tasks %>
    <% else %>
      <% set var_direct = false | bool %>
      <% set var_run_stage_name = var_run_stage_item %>
      <% set var_run_stages = params.run_stages[var_run_stage_name] %>
    <% endif %>

  <% set ns_run = namespace(list=[], pod_map={}, all_pod_names=[]) %>

  <% for var_run_stage_task_item in var_run_stages %>
    <% if var_direct %>
      <% set var_run_stage_task_name = loop.index | string %>
      <% set var_run_stage_task = var_run_stage_task_item %>
      <% set var_task_tag = var_run_stage_task_item.name %>
    <% else %>
      <% set var_run_stage_task_name = var_run_stage_task_item %>
      <% set var_run_stage_task = params.run_stage_tasks[var_run_stage_task_name] %>
      <% set var_task_tag = var_run_stage_task.task_tag | default('') %>
    <% endif %>
    
    <% set var_nodes_tasks = var_run_stage_task.nodes_tasks | default(false, true) | bool %>
    <% set var_pods_tasks = var_run_stage_task.pods_tasks | default(false, true) | bool %>
    <% set var_partial_pods = var_run_stage_task.partial_pods | default(false, true) | bool %>
    <% set var_all_nodes = var_run_stage_task.all_nodes | default(false, true) | bool %>
    <% set var_node_list = ns_outer_run.all_node_names %>

    <% if not var_direct %>
      <% if var_all_nodes and var_partial_pods %>
        <% set error = {} %>
        << error['error.run_stage[' + var_run_stage_name + 
          '].run_stage_task[' + var_run_stage_task_name + 
          '].both_all_nodes_and_partial_pods_defined'] >>
      <% endif %>
    <% endif %>
    
    <% if (not var_all_nodes) and ((var_run_stage_task.nodes | default([]) | length) == 0) %>
      <% set error = {} %>
      << error['error.run_stage[' + var_run_stage_name + 
        '].run_stage_task[' + var_run_stage_task_name + 
        '].neither_all_nodes_nor_nodes_defined'] >>
    <% endif %>

    <% if not var_all_nodes %>
      <% set var_node_list = var_run_stage_task.nodes | default([]) %>
    <% endif %>

    <% for var_node_aux in var_node_list | unique %>
      <% if not var_partial_pods %>
        <% set var_node_name = var_node_aux.name | default(var_node_aux) %>
      <% else %>
        <% if var_direct %>
          <% set var_node_name = var_node_aux.name | default(var_node_aux) %>
          <% set var_pod_names = var_run_stage_task_item.pods_per_node[var_node_name] | default([]) %>
        <% else %>
          <% set var_run_stage_node_pods_info = var_run_stage_node_pods_dict[var_node_aux] %>
          <% set var_node_name = var_run_stage_node_pods_info.node %>
          <% set var_pod_names = var_run_stage_node_pods_info.pods | default([]) %>
        <% endif %>
      <% endif %>

      <% if var_node_name not in ns_outer_run.all_node_names %>
        <% set error = {} %>
        << error['error.run_stage[' + var_run_stage_name + 
          '].run_stage_task[' + var_run_stage_task_name + 
          '].node[' + var_node_name + 
          '].node_not_in_ctx'] >>
      <% endif %>

      <% set var_node_item = ns_outer_run.node_map[var_node_name] %>
      <% set var_node_key = var_node_item.key | default(var_node_item.name) | default(var_node_item) %>
      <% set var_node = params.nodes[var_node_key] | default({}) %>
      <% set var_cloud = params.clouds[var_node.cloud] | default({}) %>
      <% set var_tasks_group_name = var_node.tasks_group | default('') %>
      <% set var_node_all_pods = var_node.pods | default([]) %>

      <% for var_pod_item in var_node_all_pods %>
        <% set var_pod_name = var_pod_item.name | default(var_pod_item) %>
        <% set ns_run.pod_map = ns_run.pod_map | combine({ 
          var_pod_name: var_pod_item 
        }) %>
        <% set ns_run.all_pod_names = ns_run.all_pod_names + [var_pod_name] %>
      <% endfor %>

      <% if not var_partial_pods %>
        <% set var_pod_names = ns_run.all_pod_names %>
      <% endif %>

      <% if var_nodes_tasks and (var_direct or ((var_tasks_group_name | default('')) != '')) %>
        <% if var_direct %>
          <% set var_tasks_group_name = 'no_group' %>
          <% set var_task_name = var_run_stage_task_item.name %>
        <% else %>
          <% set var_tasks_group = var_tasks_group_dict[var_tasks_group_name] | default({}) %>
          <% set var_task_name = var_tasks_group[var_task_tag] | default('') %>
        <% endif %>
        
        <% set var_task = var_task_dict[var_task_name] | default({}) %>
        <% set var_task_type = var_task.type | default('') %>

        <% if var_task_type == '' %>
          <% set error = {} %>
          << error['error.run_stage[' + var_run_stage_name + 
            '].run_stage_task[' + var_run_stage_task_name + 
            '].node[' + var_node_name + 
            '].task_tag[' + var_task_tag + 
            '].tasks_group[' + var_tasks_group_name + 
            '].task[' + var_task_name + 
            '].type.empty' + ''] >>
        <% elif var_task_type in ['task', 'shell'] %>

          <% set var_run_task_params = {
            'title': 'node[' + var_node_name + 
              '] - stage[' + var_run_stage_name + '.' + var_run_stage_task_name + 
              '] - task[' + var_task_tag + ']',
            'task': var_task,
            'output_path': var_node.base_dir + '/.node/data/log',
            'output_file': 'run.' + var_run_stage_task_name + '.' + var_task_tag + '.log',
            'tmp_path': var_node.base_dir + '/.node/data/tmp',
            'tmp_file': 'run.' + var_run_stage_task_name + '.' + var_task_tag + '.log',
            'chdir': var_node.base_dir,
            'node_item': var_node_item,
            'pod_name': ''
          } %>  

          <% set ns_run.list = ns_run.list + [var_run_task_params] %> 
        <% elif var_task_type != 'skip' %>
          <% set error = {} %>
          << error['error.run_stage[' + var_run_stage_name + 
            '].run_stage_task[' + var_run_stage_task_name + 
            '].node[' + var_node_name + 
            '].task_tag[' + var_task_tag + 
            '].tasks_group[' + var_tasks_group_name + 
            '].task[' + var_task_name + 
            '].type.invalid[' + var_task_type + ']'] >>
        <% endif %>
      <% endif %>

      <% if var_pods_tasks %>
        <% for var_pod_name in var_pod_names | unique %>
          <% if var_pod_name not in ns_run.all_pod_names %>
            <% set error = {} %>
            << error['error.run_stage[' + var_run_stage_name + 
              '].run_stage_task[' + var_run_stage_task_name + 
              '].node[' + var_node_name + 
              '].pod[' + var_pod_name + 
              '].pod_not_in_node'] >>
          <% endif %>      

          <% set var_pod_item = ns_run.pod_map[var_pod_name] %>
          <% set var_pod_key = var_pod_item.key | default(var_pod_item.name) | default(var_pod_item) %>
          <% set var_pod = params.pods[var_pod_key] | default({}) %>
          <% set var_tasks_group_name = var_pod.tasks_group | default('') %>

          <% if var_direct or ((var_tasks_group_name | default('')) != '') %>
            <% if var_direct %>
              <% set var_tasks_group_name = 'no_group' %>
              <% set var_task_name = var_run_stage_task_item.name %>
            <% else %>
              <% set var_tasks_group = var_tasks_group_dict[var_tasks_group_name] | default({}) %>
              <% set var_task_name = var_tasks_group[var_task_tag] | default('') %>
            <% endif %>
            
            <% set var_task = var_task_dict[var_task_name] | default({}) %>
            <% set var_task_type = var_task.type | default('') %>

            <% if var_task_type == '' %>
              <% set error = {} %>
              << error['error.run_stage[' + var_run_stage_name + 
                '].run_stage_task[' + var_run_stage_task_name + 
                '].node[' + var_node_name + 
                '].pod[' + var_pod_name + 
                '].task_tag[' + var_task_tag + 
                '].tasks_group[' + var_tasks_group_name + 
                '].task[' + var_task_name + 
                '].type.empty' + ''] >>
            <% elif var_task_type in ['task', 'shell'] %>
              <% set var_pod_base_dir = var_node.base_dir + '/' + var_pod_name %>

              <% set var_pod_repo_location = var_pod_base_dir + '/main' %>
              
              <% if (var_cloud.type == 'local') and 
                ((var_local_pod_dir_dict[var_pod_name] | default('')) != '') 
              %>
                <% set var_pod_repo_location = var_local_base_dir_pod + '/' + 
                  var_local_pod_dir_dict[var_pod_name] 
                %>
              <% endif %>
              
              <% set var_run_task_params = {
                'title': 'node[' + var_node_name + '] - pod[' + var_pod_name + 
                  '] - stage[' + var_run_stage_name + '.' + var_run_stage_task_name + 
                  '] - task[' + var_task_tag + ']',
                'task': var_task,
                'output_path': var_pod_base_dir + '/data/log/run',
                'output_file': var_run_stage_task_name + '.' + var_task_tag + '.log',
                'tmp_path': var_pod_base_dir + '/data/tmp/run',
                'tmp_file': var_run_stage_task_name + '.' + var_task_tag + '.log',
                'chdir': var_pod_repo_location,
                'node_item': var_node_item,
                'pod_name': var_pod_name
              } %>  

              <% set ns_run.list = ns_run.list + [var_run_task_params] %>  

            <% elif var_task_type != 'skip' %>
              <% set error = {} %>
              << error['error.run_stage[' + var_run_stage_name + 
                '].run_stage_task[' + var_run_stage_task_name + 
                '].node[' + var_node_name + 
                '].pod[' + var_pod_name + 
                '].task_tag[' + var_task_tag + 
                '].tasks_group[' + var_tasks_group_name + 
                '].task[' + var_task_name + 
                '].type.invalid.' + var_task_type] >>
            <% endif %>
          <% endif %>
        <% endfor %>
      <% endif %>
    <% endfor %>
  <% endfor %>

<% if (ns_run.list | length) > 0 %>

<% if not (ns_outer_run.first | bool) %>
###############################################################################
<% endif %>

<% set ns_outer_run.first = false %>

- name: Play 03.<< loop.index >> - Run (<< var_run_stage_name >>)
  hosts: main,host
  any_errors_fatal: true
  tags:
  - init
  - run
  gather_facts: no
  tasks:
  - include_tasks: "tasks/init.yml"
    when: ansible_connection != 'local'
    tags: ["no_print"]

  - include_role: 
      name: "cloud_run"
    vars:
      cloud_run_title: "{{ env_title }} - run - {{ main_item.title }}"
      cloud_run_task: "{{ main_item.task }}"
      cloud_run_default_output_path: "{{ main_item.output_path }}"
      cloud_run_default_output_file: "{{ main_item.output_file }}"
      cloud_run_default_tmp_path: "{{ main_item.tmp_path }}"
      cloud_run_default_tmp_file: "{{ main_item.tmp_file }}"
      cloud_run_default_chdir: "{{ main_item.chdir }}"
      cloud_run_env: "{{ env }}"
      cloud_run_node_item: "{{ main_item.node_item | default('') }}"
      cloud_run_node_name: >-
        {{ cloud_run_node_item.name | default(cloud_run_node_item) | default('') }}
      cloud_run_node_key: >-
        {{ 
        cloud_run_node_item.key | default(cloud_run_node_item.name) | 
        default(cloud_run_node_item) | default('') 
        }}
      cloud_run_node: "{{ env.nodes[cloud_run_node_key] | default({}) }}"
      cloud_run_pod_name: "{{ main_item.pod_name | default('') }}"
      cloud_run_pod: "{{ env.pods[cloud_run_pod_name] | default({}) }}"
      cloud_run_cloud: "{{ env.clouds[cloud_run_node.cloud | default('')] | default({}) }}"
    loop: <% if (ns_run.list | length) == 0 %>[]<% else %>
      <% for main_run_item in ns_run.list %>     
      << '\n' >>
      - << main_run_item | to_nice_yaml(indent=2) | replace('\n', '\n        ') >>
      <% endfor %><% endif %>  
    loop_control:
      loop_var: main_item
      label: "{{ main_item.title }}"
    when: >-
      ((ansible_connection == 'local') or (cloud_run_node_name == instance_type))
      and
      (((env_node | default('')) == '') or (env_node == cloud_run_node_name))
      and 
      (
      ((ansible_connection == 'local') and ((cloud_run_cloud.type | default('')) == 'local'))
      or
      ((ansible_connection != 'local') and ((cloud_run_cloud.type | default('')) != 'local'))
      )

<% endif %>
<% endfor %>

###############################################################################
##################          DEFINE THE CRON JOBS           ####################
###############################################################################

- name: Play 04 - Define the cron jobs
  hosts: main,host
  tags:
  - init
  - cron
  - cron_local
  gather_facts: no
  tasks:
  - include_tasks: "tasks/init.yml"
    when: ansible_connection != 'local'
    tags: ["no_print"]

  - include_tasks: "{{ env_hooks.before_cron }}"
    when: >-
      (((env_node | default('')) == '') or (env_node == instance_type))
      and
      ((env_hooks.before_cron | default('')) != '')

  - include_role: 
      name: "cron"
    vars:
      cron_node_name: "{{ main_item.name | default(main_item) }}"
      cron_node_key: "{{ main_item.key | default(main_item.name) | default(main_item) }}"
      cron_node: "{{ env.nodes[cron_node_key] }}"
      cron_title: "{{ env_title }} - cron - {{ cron_node_name }}"
      cron_node_params_dict: "{{ env.node_params | default({}) }}"
      cron_node_shared_params_dict: "{{ env.node_shared_params | default({}) }}"
      cron_node_shared_group_params_dict: "{{ env.node_shared_group_params | default({}) }}"
      cron_env_dir: "{{ env_dir }}"
      cron_start: "true"
      cron_cloud: "{{ env.clouds[cron_node.cloud] }}"
      cron_tmp_dir: "{{ cron_node.base_dir }}/tmp/nodes/{{ cron_node_name }}/cron"
    loop: "{{ env.main[env.ctx].nodes | default([]) | list }}"
    loop_control:
      loop_var: main_item
    when: >-
      ((ansible_connection == 'local') or (cron_node_name == instance_type))
      and
      (((env_node | default('')) == '') or (env_node == cron_node_name))
      and 
      (
      ((ansible_connection == 'local') and (cron_cloud.type == 'local'))
      or
      ((ansible_connection != 'local') and (cron_cloud.type != 'local'))
      )

  - include_tasks: "{{ env_hooks.after_cron }}"
    when: >-
      (((env_node | default('')) == '') or (env_node == instance_type))
      and
      ((env_hooks.after_cron | default('')) != '')

###############################################################################
##################            DESTROY THE CLOUD            ####################
###############################################################################

- name: Play 05.01 - Delete Temporary Cloud Instances
  hosts: main
  tags:
  - init
  - temp
  - cloud
  gather_facts: no  
  tasks:
  - include_tasks: "tasks/init.yml"
    when: ansible_connection != 'local'
    tags: ["no_print"]

  - include_tasks: "{{ env_hooks.before_delete_tmp }}"
    when: (env_hooks.before_delete_tmp | default('')) != ''

  - include_role: 
      name: "cloud_node"
    vars: 
      cloud_node_env_name: "{{ env.name }}"
      cloud_node_node_name: "{{ main_item.name | default(main_item) }}"
      cloud_node_node_key: "{{ main_item.key | default(main_item.name) | default(main_item) }}"
      cloud_node_node: "{{ env.nodes[cloud_node_node_key] }}"
      cloud_node_title: >-
        {{ env_title }} - cloud - destroy temporary instances - {{ cloud_node_node_name }}
      cloud_node_node_credentials: >-
        {{ env.credentials[cloud_node_node.credentials] }}
      cloud_node_node_params_dict: "{{ env.node_params | default({}) }}"
      cloud_node_node_shared_params_dict: "{{ env.node_shared_params | default({}) }}"
      cloud_node_node_shared_group_params_dict: "{{ env.node_shared_group_params | default({}) }}"
      cloud_node_cloud: "{{ env.clouds[cloud_node_node.cloud] }}"
      cloud_node_cloud_credentials: >-
        {{ env.credentials[cloud_node_cloud.credentials] }}
      cloud_node_credentials_dict: "{{ env.credentials }}"
      cloud_node_dns_dict: "{{ env.dns }}"
      cloud_node_env_dir: "{{ env_dir }}"
      cloud_node_tmp_dir: >-
        {{ env_tmp_dir }}/cloud/node/{{ cloud_node_node.cloud }}
      cloud_node_hosts_file: "{{ inventory_file }}"
      cloud_node_shutdown: true
      cloud_node_allow_destroy_dns: "{{ env.destroy[env.ctx].node_dns | default(false) | bool }}"
    loop: "{{ env.main[env.ctx].nodes | default([]) | list }}"
    loop_control:
      loop_var: main_item
    when: >-
      (cloud_node_node.tmp | default(false) | bool)
      and
      (((env_node | default('')) == '') or (env_node == cloud_node_node_name))
      and 
      (not (cloud_node_node.external | default(false) | bool))

  - include_tasks: "{{ env_hooks.after_delete_tmp }}"
    when: (env_hooks.after_delete_tmp | default('')) != ''

###############################################################################

- name: Play 05.02 - Delete everything that was created previously
  hosts: main
  tags:
  - never
  - destroy
  gather_facts: no  
  tasks:
  - include_tasks: "tasks/init.yml"
    when: ansible_connection != 'local'
    tags: ["no_print"]

  - include_tasks: "{{ env_hooks.before_delete_main }}"
    when: (env_hooks.before_delete_main | default('')) != ''
   
  - include_role: 
      name: "cloud_node"
    vars: 
      cloud_node_env_name: "{{ env.name }}"
      cloud_node_node_name: "{{ main_item.name | default(main_item) }}"
      cloud_node_node_key: "{{ main_item.key | default(main_item.name) | default(main_item) }}"
      cloud_node_node: "{{ env.nodes[cloud_node_node_key] }}"
      cloud_node_title: "{{ env_title }} - [destroy] cloud - destroy instances - {{ cloud_node_node_name }}"
      cloud_node_node_credentials: >-
        {{ env.credentials[cloud_node_node.credentials] }}
      cloud_node_node_params_dict: "{{ env.node_params | default({}) }}"
      cloud_node_node_shared_params_dict: "{{ env.node_shared_params | default({}) }}"
      cloud_node_node_shared_group_params_dict: "{{ env.node_shared_group_params | default({}) }}"
      cloud_node_cloud: "{{ env.clouds[cloud_node_node.cloud] }}"
      cloud_node_cloud_credentials: >-
        {{ env.credentials[cloud_node_cloud.credentials] }}
      cloud_node_credentials_dict: "{{ env.credentials }}"
      cloud_node_dns_dict: "{{ env.dns }}"
      cloud_node_env_dir: "{{ env_dir }}"
      cloud_node_tmp_dir: >-
        {{ env_tmp_dir }}/cloud/node/{{ cloud_node_node.cloud }}
      cloud_node_hosts_file: "{{ inventory_file }}"
      cloud_node_shutdown: true
      cloud_node_allow_destroy_dns: "{{ env.destroy[env.ctx].node_dns | default(false) | bool }}"
    loop: "{{ env.main[env.ctx].nodes | default([]) | list }}"
    loop_control:
      loop_var: main_item
    when: >-
      (cloud_node_node_name in (env.destroy[env.ctx].nodes | default([])))
      and 
      (not (cloud_node_node.external | default(false) | bool))

  - name: "[destroy] delete the buckets and all their contents"
    aws_s3:
      s3_url: "{{ main_bucket.endpoint }}"
      access_key: "{{ main_credentials.access_key }}"
      secret_key: "{{ main_credentials.secret_key }}"
      bucket: "{{ main_bucket.name }}"
      mode: delete
    vars:
      main_bucket: "{{ env.buckets[main_item] }}"
      main_credentials: "{{ env.credentials[main_bucket.credentials] }}"
    loop: "{{ (env.destroy[env.ctx].buckets | default([])) }}"
    loop_control:
      loop_var: main_item
      label: "{{ main_item }}"

  - include_role: 
      name: "cloud_dns"
    vars: 
      main_dns: "{{ env.dns[main_item.name] }}"
      cloud_dns_title: >-
        {{ env_title }} - delete the static dns records - 
        dns[{{ main_dns.type }}] - {{ main_item.record }}
      cloud_dns_type: "{{ main_dns.type }}"
      cloud_dns_credentials: >-
        {{ env.credentials[main_dns.credentials] }}
      cloud_dns_zone: "{{ main_dns.zone }}"
      cloud_dns_record_type: "{{ main_item.dns_type }}"
      cloud_dns_record: "{{ main_item.record }}"
      cloud_dns_data_list: []
      cloud_dns_state: "absent"
    loop: "{{ env.destroy[env.ctx].dns | default([]) | list }}"
    loop_control:
      loop_var: main_item
      label: "{{ main_item.name }}"

  - include_role: 
      name: "cloud_main"
    vars: 
      cloud_main_title: "{{ env_title }} - [destroy] cloud[{{ main_item }}]"
      cloud_main_env_name: "{{ env.name }}"
      cloud_main_cloud: "{{ env.clouds[main_item] }}"
      cloud_main_credentials: >-
        {{ env.credentials[cloud_main_cloud.credentials] }}
      cloud_main_cloud_params_dict: "{{ env.cloud_params | default({}) }}"
      cloud_main_cloud_shared_params_dict: "{{ env.cloud_shared_params | default({}) }}"
      cloud_main_cloud_shared_group_params_dict: "{{ env.cloud_shared_group_params | default({}) }}"
      cloud_main_tmp_dir: "{{ env_tmp_dir }}/cloud/main/{{ main_item }}"
      cloud_main_state: "absent"
    loop: "{{ env.main[env.ctx].clouds | default([]) | list }}"
    loop_control:
      loop_var: main_item
    when: main_item in (env.destroy[env.ctx].clouds | default([]))

  - include_tasks: "{{ env_hooks.after_delete_main }}"
    when: (env_hooks.after_delete_main | default('')) != ''

###############################################################################
